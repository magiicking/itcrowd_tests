// Возвращает Истина, если клиентское приложение запущено под управлением ОС Windows.
//
// Возвращаемое значение:
//  Булево. Если нет клиентского приложения, возвращается Ложь.
//
&НаКлиенте
Функция ЭтоWindowsКлиент() Экспорт
	
#Если Клиент Или ВнешнееСоединение Тогда
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindowsКлиент = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
	             ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;
#Иначе
	ЭтоWindowsКлиент = Ложь;
#КонецЕсли
	
	Возврат ЭтоWindowsКлиент;
	
КонецФункции


&НаСервере
Функция ВставитьПараметрыВСтроку(Знач ШаблонСтроки, ВставляемыеЗначения) Экспорт
	
	Результат = ШаблонСтроки;
	Для Каждого Параметр Из ВставляемыеЗначения Цикл
		Результат = СтрЗаменить(Результат, "[" + Параметр.Ключ + "]", Параметр.Значение);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции


&НаСервере
Функция ПолучитьОбластьМакета(ТекстМакета, Начало, Конец)
	
	ПозицияНачала = Найти(ТекстМакета, Начало);
	ПозицияКонца  = Найти(ТекстМакета, Конец);
	Если ПозицияНачала = 0 Или ПозицияКонца = 0 Или ПозицияНачала > ПозицияКонца Тогда
		Возврат "";
	КонецЕсли;
	
	ПозицияНачала = ПозицияНачала + СтрДлина(Начало);
	ПозицияКонца  = ПозицияКонца - 1;
	Возврат Сред(ТекстМакета, ПозицияНачала, ПозицияКонца - ПозицияНачала);
	
КонецФункции


&НаСервере
Функция СобратьИсточник(ХранилищеЗначений)
	
	ДвоичныеДанные = ХранилищеЗначений.Получить();
	ДанныеСтрокой = Base64Строка(ДвоичныеДанные);
	Ответ = "data:image/gif;base64," + ДанныеСтрокой;
	Возврат Ответ;
	
КонецФункции


&НаСервере
Функция ЗаполнитьХТМЛ()
	
	ТекстМакета 	= РеквизитФормыВЗначение("Объект").ПолучитьМакет("ХТМЛ").ПолучитьТекст();
	
	Шапка	= ПолучитьОбластьМакета(ТекстМакета, "%Шапка", 	"%ШапкаК");
	Подвал 	= ПолучитьОбластьМакета(ТекстМакета, "%Подвал", "%ПодвалК");
	ТабН 	= ПолучитьОбластьМакета(ТекстМакета, "%ТабН", 	"%ТабНК");
	ТабК 	= ПолучитьОбластьМакета(ТекстМакета, "%ТабК", 	"%ТабКК");
	СтрН 	= ПолучитьОбластьМакета(ТекстМакета, "%СтрН", 	"%СтрНК");
	СтрК 	= ПолучитьОбластьМакета(ТекстМакета, "%СтрК", 	"%СтрКК");
	Яч 		= ПолучитьОбластьМакета(ТекстМакета, "%Яч", 	"%ЯчК");
	
	Родитель = Справочники.ТелеграмЭмодзи.НайтиПоКоду(НомерНабора);
	ДлинаСтроки = 14;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТелеграмЭмодзи.Ссылка КАК Ссылка,
	|	ТелеграмЭмодзи.Код КАК Код,
	|	ТелеграмЭмодзи.Наименование КАК Наименование,
	|	ТелеграмЭмодзи.Картинка КАК Картинка,
	|	ТелеграмЭмодзи.НомерКартинки КАК НомерКартинки
	|ИЗ
	|	Справочник.ТелеграмЭмодзи КАК ТелеграмЭмодзи
	|ГДЕ
	|	ТелеграмЭмодзи.Родитель = &Родитель
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерКартинки";
	
	ХТМЛ = Шапка;
	ХТМЛ = ХТМЛ + ТабН;
	ХТМЛ = ХТМЛ + СтрН;
	
	ИИ = 1;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПараметрыДанных = Новый Структура;
		ПараметрыДанных.Вставить("Картинка", СобратьИсточник(Выборка.Картинка));
		ПараметрыДанных.Вставить("Ширина", 64);
		ПараметрыДанных.Вставить("Идентификатор", Выборка.Наименование);
		
		ХТМЛ = ХТМЛ + ВставитьПараметрыВСтроку(Яч, ПараметрыДанных);
		
		Если ИИ = ДлинаСтроки Тогда
			ХТМЛ = ХТМЛ + СтрК;
			ИИ = 1;
		Иначе
			ИИ = ИИ + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ХТМЛ = ХТМЛ + СтрК;
	ХТМЛ = ХТМЛ + ТабК;
	ХТМЛ = ХТМЛ + Подвал;	
	
КонецФункции


&НаКлиенте
Процедура НомерНабораПриИзменении(Элемент)
	
	ЗаполнитьХТМЛ();
	
КонецПроцедуры


&НаКлиенте
Процедура ХТМЛПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Попытка
		ИдКартинки = ДанныеСобытия.Element.id;
		Если ЗначениеЗаполнено(ИдКартинки) Тогда
			ТекстовоеПредставление = "Эмодзи_" + ДанныеСобытия.Element.id;
		КонецЕсли;
		Если ЭтоWindowsКлиент И КопироватьВБуфер Тогда
			КОбъект = Новый COMОбъект("htmlfile");
			КОбъект.ParentWindow.ClipboardData.Setdata("Text", ТекстовоеПредставление);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЭтоWindowsКлиент = ЭтоWindowsКлиент();
	Элементы.КопироватьВБуфер.Видимость = ЭтоWindowsКлиент;
	
КонецПроцедуры
