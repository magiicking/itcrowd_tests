&НаКлиенте
Процедура СформироватьСлучайныйВебхукКлюч(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВебхукКлюч) Тогда
		Объект.ВебхукКлюч = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	ВебхукКлючПриИзменении("");
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьИнформациюОСостоянииВебхука(Команда)
	
	ОбновитьИнформациюОСостоянииВебхукаСервер();
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьИнформациюОСостоянииВебхукаСервер()
	
	ДанныеБота = Новый Структура;
	ДанныеБота.Вставить("Бот", Объект.Ссылка);
	ДанныеБота.Вставить("Жетон", Объект.Жетон);
	СтрокаJSON = ТелеграмAPI.ВыполнитьМетод(ДанныеБота, "getWebhookInfo");
	СостояниеВебхука = ТелеграмСервер.ФорматироватьСтрокуJSON(СтрокаJSON);
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.СпособПолученияОбновлений = Перечисления.ТелеграмСпособыПолученияОбновлений.Вебхуки Тогда
		ОбновитьИнформациюОСостоянииВебхукаСервер();
	КонецЕсли;
	
	Если Объект.СпособПолученияОбновлений = Перечисления.ТелеграмСпособыПолученияОбновлений.ПериодическийЗапрос Тогда
		ОбновитьИнформациюОПоследнемВыполненииСервер();
		ОбновитьИнформациюОТекущемРасписании();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьСертификат(Команда)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Фильтр 			= "Сертификат|*.pem;*.crt;*.cer;*.key";
	ДиалогВыбора.Заголовок 			= "Выберите файл сертификата в формате PEM";
	ДиалогВыбора.МножественныйВыбор = Ложь;
	ОО = Новый ОписаниеОповещения("ЗагрузитьСертификатВыбор", ЭтаФорма);
	ДиалогВыбора.Показать(ОО);
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьСертификатВыбор(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		ВыбранныйФайл = ВыбранныеФайлы[0];
		Файл = Новый Файл(ВыбранныйФайл);
		Объект.PEMИмя = Файл.Имя;
		ДвоичныеДанные = Новый ДвоичныеДанные(ВыбранныйФайл);
		СодержимоеСертификата = Base64Строка(ДвоичныеДанные);
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	Элементы.СтраницаСтатусВебхука.Видимость 					= Объект.СпособПолученияОбновлений = ПредопределенноеЗначение("Перечисление.ТелеграмСпособыПолученияОбновлений.Вебхуки");
	Элементы.СтраницаСтатусПериодическогоОбновления.Видимость 	= Объект.СпособПолученияОбновлений = ПредопределенноеЗначение("Перечисление.ТелеграмСпособыПолученияОбновлений.ПериодическийЗапрос");
	Элементы.ЗагрузитьСертификат.Доступность 					= Объект.ИспользуетсяСамозаверенныйСертификат;
	Элементы.СформироватьСлучайныйВебхукКлюч.Доступность 		= НЕ ЗначениеЗаполнено(Объект.ВебхукКлюч);
	Элементы.СтраницаНастройкиВебхука.Видимость 				= Объект.СпособПолученияОбновлений = ПредопределенноеЗначение("Перечисление.ТелеграмСпособыПолученияОбновлений.Вебхуки");
	Элементы.СтраницаНастройкиПолученияОбновлений.Видимость 	= Объект.СпособПолученияОбновлений = ПредопределенноеЗначение("Перечисление.ТелеграмСпособыПолученияОбновлений.ПериодическийЗапрос");
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьДоступность();
	ОбновитьЗначенияФормы();
	
КонецПроцедуры


&НаКлиенте
Процедура СпособПолученияОбновленийПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры


&НаКлиенте
Процедура ВебхукКлючПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	ОбновитьЗначенияФормы();
	
КонецПроцедуры


&НаКлиенте
Процедура ИспользуетсяСамозаверенныйСертификатПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры


&НаКлиенте
Процедура ВебхукАдресПриИзменении(Элемент)
	
	ОбновитьЗначенияФормы();
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьЗначенияФормы()
	
	ПолныйАдрес = Объект.ВебхукАдрес + Объект.ВебхукКлюч;
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция РасписаниеРегламентногоЗадания(ИдентификаторЗадания)
	
	УстановитьПривилегированныйРежим(Истина);
	РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	УстановитьПривилегированныйРежим(Ложь);
	Если РегламентноеЗадание = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат РегламентноеЗадание.Расписание;
	КонецЕсли;
	
КонецФункции


&НаСервере
Функция РасписаниеСериализатор()

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(НовоеРасписание);
	Расписание = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON, Тип("РасписаниеРегламентногоЗадания"));
	
КонецФункции


&НаКлиенте
Процедура НастроитьРасписание(Команда)
	
	Если ЗначениеЗаполнено(НовоеРасписание) Тогда
		Расписание = РасписаниеСериализатор();
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Расписание = Новый РасписаниеРегламентногоЗадания;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ИдентификаторРегламентногоЗадания) Тогда
		Расписание = Новый РасписаниеРегламентногоЗадания;
	Иначе
		Расписание = РасписаниеРегламентногоЗадания(Объект.ИдентификаторРегламентногоЗадания);
	КонецЕсли;
	
	Если Расписание <> Неопределено Тогда
		ДиалогНастройкиРасписания = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
		ОО = Новый ОписаниеОповещения("НастроитьРасписаниеВыбор", ЭтаФорма);
		ДиалогНастройкиРасписания.Показать(ОО);
	Иначе
		ПоказатьПредупреждение(, "Регламентное задание отсутствует");
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура НастроитьРасписаниеВыборСервер(Расписание)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ЗаписьJSON.УстановитьСтроку(ТелеграмСервер.ПараметрыЗаписиJSON());
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, Расписание);
	НовоеРасписание = ЗаписьJSON.Закрыть();
	
КонецПроцедуры


&НаКлиенте
Процедура НастроитьРасписаниеВыбор(Расписание, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Расписание) = Тип("РасписаниеРегламентногоЗадания") Тогда
		НастроитьРасписаниеВыборСервер(Расписание);
		ЭтаФорма.Модифицированность = Истина;
		ОбновитьИнформациюОТекущемРасписании();
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	НовоеРасписание = "";
	СодержимоеСертификата = "";
	
	Если Объект.СпособПолученияОбновлений = Перечисления.ТелеграмСпособыПолученияОбновлений.ПериодическийЗапрос Тогда
		ОбновитьИнформациюОТекущемРасписании();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьСейчас(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(, "Необходимо предварительно записать элемент");
		Возврат;
	КонецЕсли;
	
	ПолучитьСейчасСервер();
	
КонецПроцедуры


&НаСервере
Процедура ПолучитьСейчасСервер()
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(Объект.ИдентификаторРегламентногоЗадания) Тогда
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Объект.ИдентификаторРегламентногоЗадания);
		Если РегламентноеЗадание <> Неопределено Тогда
			ИмяМетода = РегламентноеЗадание.Метаданные.ИмяМетода;
			ПараметрыЗадания = РегламентноеЗадание.Параметры;
			Наименование = ?(ЗначениеЗаполнено(РегламентноеЗадание.Наименование), РегламентноеЗадание.Наименование, РегламентноеЗадание.Метаданные.Представление());
			Ключ = "" + Объект.ИдентификаторРегламентногоЗадания;
			Попытка
				ФоновыеЗадания.Выполнить(ИмяМетода, ПараметрыЗадания, Ключ, Наименование);
			Исключение
				// Фоновое задание с заданным ключом уже выполняется...
			КонецПопытки;			
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьИнформациюОТекущемРасписании()
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(Объект.ИдентификаторРегламентногоЗадания) Тогда
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Объект.ИдентификаторРегламентногоЗадания);
		Если РегламентноеЗадание <> Неопределено Тогда
			Если РегламентноеЗадание.Использование = Истина Тогда
				ТекущееРасписание = "" + РегламентноеЗадание.Расписание;
				Если ЗначениеЗаполнено(НовоеРасписание) Тогда
					ЧтениеJSON = Новый ЧтениеJSON;
					ЧтениеJSON.УстановитьСтроку(НовоеРасписание);
					ТекущееРасписание = "" + СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON, Тип("РасписаниеРегламентногоЗадания"));
				КонецЕсли;
			Иначе
				ТекущееРасписание = "Регламентное задание выключено";
			КонецЕсли;
		Иначе
			ТекущееРасписание = "Регламентное задание создаётся (если необходимо) автоматически при записи элемента";
		КонецЕсли;
	Иначе
		ТекущееРасписание = "Регламентное задание создаётся (если необходимо) автоматически при записи элемента";
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(НовоеРасписание) Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("НовоеРасписание", НовоеРасписание);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СодержимоеСертификата) Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СодержимоеСертификата", СодержимоеСертификата);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура НастроитьВебхук(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		ИЛИ ЭтаФорма.Модифицированность Тогда
		ПоказатьПредупреждение(, "Необходимо предварительно записать элемент");
		Возврат;
	КонецЕсли;
	
	Если Объект.ИспользуетсяСамозаверенныйСертификат И НЕ ЗначениеЗаполнено(Объект.PEMИмя) Тогда
		ПоказатьПредупреждение(, "Не загружен сертификат");
		Возврат;
	КонецЕсли;
	
	ОО = Новый ОписаниеОповещения("НастроитьВебхукВыбор", ЭтаФорма);
	ТекстВопроса = "Отправить настройки на сервер Telegram?";
	ПоказатьВопрос(ОО, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры


&НаКлиенте
Процедура НастроитьВебхукВыбор(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		СтрокаJSON = ОтправитьНастройкиСервер();
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("СтрокаJSON", СтрокаJSON);
		ОткрытьФорму("Справочник.ТелеграмБоты.Форма.ФормаПоказаJSON", ПараметрыОткрытия);
		ОбновитьИнформациюОСостоянииВебхукаСервер();
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ОтправитьНастройкиСервер()

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("url", ПолныйАдрес);
	Если Объект.ИспользуетсяСамозаверенныйСертификат Тогда
		ДвоичныеДанные = Новый Структура;
		ДвоичныеДанные.Вставить("ВидИсточника", "ДвоичныеДанные");
		ДвоичныеДанные.Вставить("Источник", Объект.Ссылка.ПолучитьОбъект().PEM.Получить());
		ДвоичныеДанные.Вставить("Ключ", "certificate");
		ДвоичныеДанные.Вставить("ИмяФайла", Объект.PEMИмя);
		СтруктураПараметров.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	КонецЕсли;
	
	ДанныеБота = Новый Структура;
	ДанныеБота.Вставить("Бот", Объект.Ссылка);
	ДанныеБота.Вставить("Жетон", Объект.Жетон);
	ДанныеБота.Вставить("Имя", Объект.Наименование);
	
	СтрокаJSON = ТелеграмAPI.ВыполнитьМетод(ДанныеБота, "setWebhook", СтруктураПараметров);
	Возврат СтрокаJSON;
	
КонецФункции


&НаКлиенте
Процедура УдалитьВебхук(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьВебхукВыбор", ЭтаФорма);
	ТекстВопроса = "Удалить настройки вебхука с сервера Telegram?";
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);

КонецПроцедуры


&НаКлиенте
Процедура УдалитьВебхукВыбор(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		
		ДанныеБота = Новый Структура;
		ДанныеБота.Вставить("Бот", Объект.Ссылка);
		ДанныеБота.Вставить("Жетон", Объект.Жетон);
		ДанныеБота.Вставить("Имя", Объект.Наименование);
		
		СтрокаJSON = ТелеграмAPI.ВыполнитьМетод(ДанныеБота, "deleteWebhook");
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("СтрокаJSON", СтрокаJSON);
		ОткрытьФорму("Справочник.ТелеграмБоты.Форма.ФормаПоказаJSON", ПараметрыОткрытия);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура КтоЯ(Команда)
	
	ДанныеБота = Новый Структура;
	ДанныеБота.Вставить("Бот", Объект.Ссылка);
	ДанныеБота.Вставить("Жетон", Объект.Жетон);
	СтрокаJSON = ТелеграмAPI.ВыполнитьМетод(ДанныеБота, "getMe");	
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СтрокаJSON", СтрокаJSON);
	ОткрытьФорму("Справочник.ТелеграмБоты.Форма.ФормаПоказаJSON", ПараметрыОткрытия);
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьИнформациюОПоследнемВыполнении(Команда)
	
	ОбновитьИнформациюОПоследнемВыполненииСервер();
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьИнформациюОПоследнемВыполненииСервер()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПоследнееВыполнение = "";
	
	Если ЗначениеЗаполнено(Объект.ИдентификаторРегламентногоЗадания) Тогда
		
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Объект.ИдентификаторРегламентногоЗадания);
		Если РегламентноеЗадание <> Неопределено Тогда
			
			ВремяНачала = ТекущаяДата() - 3600;
			
			СостоянияФоновогоЗадания = Новый Массив;
			СостоянияФоновогоЗадания.Добавить(СостояниеФоновогоЗадания.Завершено);
			СостоянияФоновогоЗадания.Добавить(СостояниеФоновогоЗадания.ЗавершеноАварийно);
			СостоянияФоновогоЗадания.Добавить(СостояниеФоновогоЗадания.Отменено);                
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("РегламентноеЗадание", РегламентноеЗадание);
			СтруктураОтбора.Вставить("Начало", ВремяНачала);
			СтруктураОтбора.Вставить("Состояние", СостоянияФоновогоЗадания);
			МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураОтбора);
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Ключ", "" + Объект.ИдентификаторРегламентногоЗадания);
			СтруктураОтбора.Вставить("Начало", ВремяНачала);
			СтруктураОтбора.Вставить("Состояние", СостоянияФоновогоЗадания);
			МассивФоновыхЗаданийКлюч = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураОтбора);
			
			Для Каждого ФоновоеЗадание Из МассивФоновыхЗаданийКлюч Цикл
				МассивФоновыхЗаданий.Добавить(ФоновоеЗадание);
			КонецЦикла;
			
			Если МассивФоновыхЗаданий.Количество() > 0 Тогда
				
				ПоследнееФоновоеЗадание = МассивФоновыхЗаданий[0];
				Для Каждого ФоновоеЗадание Из МассивФоновыхЗаданий Цикл
					Если ФоновоеЗадание.Начало > ПоследнееФоновоеЗадание.Начало Тогда
						ПоследнееФоновоеЗадание = ФоновоеЗадание;
					КонецЕсли;
				КонецЦикла;
				
				ПоследнееВыполнение =
				"Начало: " + ПоследнееФоновоеЗадание.Начало + " 
				|Конец: " + ПоследнееФоновоеЗадание.Конец + "
				|Состояние: " + ПоследнееФоновоеЗадание.Состояние;
				ИнформацияОбОшибке = ПоследнееФоновоеЗадание.ИнформацияОбОшибке;
				Если ИнформацияОбОшибке <> Неопределено Тогда
					ПоследнееВыполнение = ПоследнееВыполнение + Символы.ПС + 
					"Информация об ошибке:
					|	Имя модуля: " + ИнформацияОбОшибке.ИмяМодуля + "
					|	Исходная строка: " + ИнформацияОбОшибке.ИсходнаяСтрока + "
					|	Номер строки: " + ИнформацияОбОшибке.НомерСтроки + "
					|	Описание: " + ИнформацияОбОшибке.Описание;
				КонецЕсли;
				
			Иначе
				ПоследнееВыполнение = 
				"Период поиска: последний час
				|Отбор поиска: регламентное задание " + РегламентноеЗадание + "
				|Завершённые фоновые задания не найдены";
				
			КонецЕсли;
			
		Иначе
			ПоследнееВыполнение = "Отсутствует регламентное задание";
		КонецЕсли;
	Иначе
		ПоследнееВыполнение = "Отсутствует регламентное задание";
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры


&НаКлиенте
Процедура ПерейтиПоАдресу(Команда)
	
	ТекстВопроса = СтрШаблон("Перейти по ссылке %1?
	|Если все настройки (публикация HTTP-сервиса, адрес, ключ) 
	|осуществлены и заданы корректно, то Вы увидите на HTML-странице следующее приветствие:
	|""Привет, я GET-метод бота Telegram.""", ПолныйАдрес);
	
	ОО = Новый ОписаниеОповещения("ПерейтиПоАдресуОк", ЭтаФорма);
	ПоказатьВопрос(ОО, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры


&НаКлиенте
Процедура ПерейтиПоАдресуОк(Результат, ДП) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ПерейтиПоНавигационнойСсылке(ПолныйАдрес);
	КонецЕсли;
	
КонецПроцедуры