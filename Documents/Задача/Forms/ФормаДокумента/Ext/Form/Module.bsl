// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ДобавитьСообщение(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		яПараметры = Новый Структура("Документ", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ДобавлениеСообщения", яПараметры, ЭтаФорма, Новый УникальныйИдентификатор);
	Иначе
		Сообщить("Добавление сообщения возможно только для сохранённого документа");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветаЧасов(ъПодсказка)
	Если ИнфоФакт > ИнфоОтчет Тогда
		Элементы.ИнфоФакт.ЦветТекста = Новый Цвет(255, 99, 71);
	Иначе
		Элементы.ИнфоФакт.ЦветТекста = Новый Цвет(34, 139, 34);
	КонецЕсли;
	Элементы.ИнфоПлан.Подсказка = ъПодсказка;
	Элементы.ИнфоФакт.Подсказка = ъПодсказка;
	Элементы.ИнфоОтчет.Подсказка = ъПодсказка;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Сообщения.Параметры.УстановитьЗначениеПараметра("Документ", Объект.Ссылка);
	ITC_ОбщиеСервер.УстановитьОтборНаСписок(Сообщения, "Документ", Объект.Ссылка);
	
	Наряды.Параметры.УстановитьЗначениеПараметра("Документ", Объект.Ссылка);
	ITC_ОбщиеСервер.УстановитьОтборНаСписок(Наряды, "Документ", Объект.Ссылка);
	
	ЗаполнитьПараметрыКлиента(Ложь);
	
	ЗаполнитьКоличествоНепрочтенных();
	
	яЧасы = ОбновитьЧасыНаСервере(Объект.Ссылка);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, яЧасы);
	Элементы.ИнфоОтчет.Подсказка = яЧасы.Расшифровка;
	
	ITC_ОбщиеСервер.ПроверитьЗаполнитьАвтора(Объект.Ответственный);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	ITC_ОбщиеСервер.ЗарегистрироватьАктивность(ПараметрыСеанса.ТекущийПользователь, "ОткрытиеДокумента", Строка(Объект.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Сообщения.Параметры.УстановитьЗначениеПараметра("Документ", Объект.Ссылка);
	Наряды.Параметры.УстановитьЗначениеПараметра("Документ", Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	й = 0;
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") Тогда
		Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ДобавлениеСообщения" Тогда
			ОбновитьСообщения();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура грСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.грСообщения Тогда
		ОбновитьСообщения();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоличествоНепрочтенных()
	яКол = СообщенияСервер.ПолучитьКоличествоНепрочтенныхСообщений(Объект.Ссылка, ПараметрыСеанса.ТекущийПользователь);
	Элементы.грСообщения.Заголовок = "Сообщения" + ?(яКол > 0, " (" + яКол + " непрочтённых)", "");
	
	яШрифт = Элементы.грСообщения.ШрифтЗаголовка;
	яШрифт =  новый Шрифт(яШрифт.Вид, , яШрифт.Размер, ?(яКол > 0, Истина, Ложь), яШрифт.Наклонный, яШрифт.Подчеркивание, яШрифт.Зачеркивание, яШрифт.Масштаб);
	Элементы.грСообщения.ШрифтЗаголовка = яШрифт	;
КонецПроцедуры

&НаСервере
Процедура ОтметитьСообщенияПрочтёнными()
	ЗаполнитьКоличествоНепрочтенных();
	СообщенияСервер.ОтметитьСообщенияПрочтенными(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьЦветаЧасов(Элементы.ИнфоОтчет.Подсказка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСообщения()
	Элементы.Сообщения.Обновить();
	ОтметитьСообщенияПрочтёнными()
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСообщенияКоманда(Команда)
	ОбновитьСообщения();
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьТаймер(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ITC_ТаймерКлиент.ЗапуститьТаймер(Объект.Ссылка, ЭтаФорма);
	Иначе
		Сообщить("Задача не была сохранена, необходимо сначала сохранить.");
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОстановитьТаймерНаСервере(пСсылка)
	Обработки.ITC_Таймер.ОстановитьТаймер(пСсылка);
КонецПроцедуры

&НаКлиенте
Процедура ОстановитьТаймер(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОстановитьТаймерНаСервере(Объект.Ссылка);
	Иначе
		Сообщить("Задача не была сохранена, необходимо сначала сохранить.");
	КонецЕсли;
	
КонецПроцедуры




&НаСервере
Процедура ЗаполнитьПараметрыКлиента(ъИзменять = Ложь)
	Доступы.Параметры.УстановитьЗначениеПараметра("Клиент", Объект.Клиент);
	КонтактныеЛица.Параметры.УстановитьЗначениеПараметра("Клиент", Объект.Клиент);
	
	//Установим отбор на списки
	ITC_ОбщиеСервер.УстановитьОтборНаСписок(Доступы, "Клиент", Объект.Клиент);
	ITC_ОбщиеСервер.УстановитьОтборНаСписок(КонтактныеЛица, "Владелец", Объект.Клиент);
	
	Если ъИзменять Тогда
		яЗ = Новый Запрос(
		"ВЫБРАТЬ
		|	Клиенты.ОсновнаяОрганизация КАК Организация
		|ИЗ
		|	Справочник.Клиенты КАК Клиенты
		|ГДЕ
		|	Клиенты.Ссылка = &Ссылка");
		яЗ.УстановитьПараметр("Ссылка", Объект.Клиент);
		яВ = яЗ.Выполнить().Выбрать();
		Если яВ.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Объект, яВ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	ЗаполнитьПараметрыКлиента(Истина);
КонецПроцедуры

&НаКлиенте
Процедура Подключиться(Команда)
	
	яТД = Элементы.Доступы.ТекущиеДанные;
	яР = ITC_ПодключенияКлиент.ПодключитьсяККлиенту(Объект.Клиент, яТД.Название, яТД.ВидПодключения);
	Если Не яР.Успех Тогда
		Сообщить(яР.Сообщение);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПодключитьсяFullHD(Команда)
	
	яРазрешениеЭкрана = "
	|desktopwidth:i:1920
	|desktopheight:i:1080";
	яТД = Элементы.Доступы.ТекущиеДанные;
	яР = ITC_ПодключенияКлиент.ПодключитьсяККлиенту(Объект.Клиент, яТД.Название, яТД.ВидПодключения, яРазрешениеЭкрана);
	Если Не яР.Успех Тогда
		Сообщить(яР.Сообщение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьЧасыНаСервере(ъСсылка)
	яОтвет = Новый Структура("ИнфоФакт,ИнфоПлан,ИнфоОтчет,Расшифровка,Данные", 0, 0, 0, "", Новый Массив);
	
	яЗапрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВремяОбороты.ПланОборот КАК ИнфоПлан,
	|	ВремяОбороты.ФактОборот КАК ИнфоФакт,
	|	ВремяОбороты.ОтчетОборот КАК ИнфоОтчет,
	|	ВремяОбороты.Ответственный КАК Ответственный,
	|	ВремяОбороты.Задача КАК ГруппаЗадача,
	|	ВремяОбороты.Ответственный.Наименование КАК ОтветственныйНаименование
	|ИЗ
	|	РегистрНакопления.Время.Обороты(, , , Задача = &Задача) КАК ВремяОбороты
	|ИТОГИ
	|	СУММА(ИнфоПлан),
	|	СУММА(ИнфоФакт),
	|	СУММА(ИнфоОтчет)
	|ПО
	|	ГруппаЗадача");
	яЗапрос.УстановитьПараметр("Задача", ъСсылка);
	яРезультатЗапроса = яЗапрос.Выполнить();
	яВ = яРезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ГруппаЗадача");
	яФорматЧасы = "ЧДЦ=3; ЧН=0; ЧГ=";
	Если яВ.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(яОтвет, яВ);
		
		яВОтветственные = яВ.Выбрать();
		яМассивОтветственных = Новый Массив;
		Пока яВОтветственные.Следующий() Цикл
			яМассивОтветственных.Добавить(""
			+ яВОтветственные.ОтветственныйНаименование + ": "
			+ Формат(яВОтветственные.ИнфоПлан, яФорматЧасы) + " / "
			+ Формат(яВОтветственные.ИнфоФакт, яФорматЧасы) + " / "
			+ Формат(яВОтветственные.ИнфоОтчет, яФорматЧасы)
			);
			
			//Данные по конкретному пользователю
			яСтрокаДанных = Новый Структура("Ответственный,Факт,Отчет"
			, яВОтветственные.Ответственный
			, яВОтветственные.ИнфоФакт
			, яВОтветственные.ИнфоОтчет
			);
			яОтвет.Данные.Добавить(яСтрокаДанных);
		КонецЦикла;
		
		яОтвет.Расшифровка = СтрСоединить(яМассивОтветственных, Символы.ПС);
	КонецЕсли;
	
	Если РольДоступна("Клиент") Тогда
		яОтвет.ИнфоФакт = 0;
	КонецЕсли;
	
	Возврат яОтвет;
КонецФункции

&НаКлиенте
Процедура ОбновитьЧасы(Команда)
	яЧасы = ОбновитьЧасыНаСервере(Объект.Ссылка);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, яЧасы);
	УстановитьЦветаЧасов(яЧасы.Расшифровка);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИмяФайла(Команда)
	яО = ITC_ФайлыКлиент.ПолучитьИмяФайла(Объект.Ссылка);
	Если яО.Успех Тогда
		ВывестиВБуферОбмена(яО.Данные);
	Иначе
		ITC.Ответ_ВывестиСообщенияПользователю(яО);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	й = 0;
КонецПроцедуры

&НаСервере
Процедура КонтактныеЛицаПриАктивизацииСтрокиНаСервере(ъСсылка)
	яЗ = Новый Запрос(
	"ВЫБРАТЬ
	|	ФизическиеЛицаКонтактнаяИнформация.Вид.Наименование КАК Тип,
	|	ФизическиеЛицаКонтактнаяИнформация.Представление КАК Значение,
	|	ФизическиеЛицаКонтактнаяИнформация.НомерТелефона КАК НомерТелефона,
	|	ФизическиеЛицаКонтактнаяИнформация.Тип КАК ТипДанных
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|		ПО КонтактныеЛица.ФизическоеЛицо = ФизическиеЛицаКонтактнаяИнформация.Ссылка
	|ГДЕ
	|	КонтактныеЛица.Ссылка = &Ссылка");
	яЗ.УстановитьПараметр("Ссылка", ъСсылка);
	яТЗКонтакты =  яЗ.Выполнить().Выгрузить();
	Для Каждого яС Из яТЗКонтакты Цикл
		Если яС.ТипДанных <> Перечисления.ТипыКонтактнойИнформации.Телефон Тогда Продолжить КонецЕсли;
		яС.НомерТелефона = "9"
		+ ?(СтрНачинаетсяС(яС.НомерТелефона, "7")
		, "8" + Сред(яС.НомерТелефона, 2)
		, яС.НомерТелефона);
	КонецЦикла;
	КонтактныеДанные.Загрузить(яТЗКонтакты);
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаПриАктивизацииСтроки(Элемент)
	Если Элементы.КонтактныеЛица.ТекущаяСтрока <> Неопределено Тогда
		КонтактныеЛицаПриАктивизацииСтрокиНаСервере(Элементы.КонтактныеЛица.ТекущаяСтрока);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьЧасыОтчет(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщить("Документ необходимо предварительно записать.");
		Возврат;
	КонецЕсли;
	
	яОповещение = Новый ОписаниеОповещения("ПослеВводаКоличества", ЭтаФорма, Неопределено);
	яЧасы = ОбновитьЧасыНаСервере(Объект.Ссылка);
	ОткрытьФорму("ОбщаяФорма.ITC_ФормаРаспределенияЧасов", яЧасы, ЭтаФорма, Новый УникальныйИдентификатор,,, яОповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НарядыПоПользователю(яЗадача, яПользователь)
	яЗ = Новый Запрос(
	"ВЫБРАТЬ
	|	Наряд.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Наряд КАК Наряд
	|ГДЕ
	|	Наряд.Проведен
	|	И Наряд.ДокументОснование = &ДокументОснование
	|	И Наряд.Ответственный = &Ответственный");
	яЗ.УстановитьПараметр("ДокументОснование", яЗадача);
	яЗ.УстановитьПараметр("Ответственный", яПользователь);
	Возврат яЗ.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

&НаКлиенте
Процедура ПослеВводаКоличества(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
    Если РезультатЗакрытия <> Неопределено Тогда
        ПослеВводаКоличества_Сервер(РезультатЗакрытия, Объект.Ссылка);
		ОбновитьЧасы(Элементы.ОбновитьЧасы);
		Элементы.Наряды.Обновить();
    КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПослеВводаКоличества_Сервер(РезультатЗакрытия, яЗадача)
	Для Каждого яС Из РезультатЗакрытия Цикл
		яМассивНарядов = НарядыПоПользователю(яЗадача, яС.Ответственный);
		ITC_ОбщиеСервер.РаспределитьНаНаряды(яМассивНарядов, яС.Отчет);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура JIRA_ОбновитьНаСервере()
	яРез = ITC_JIRA.ПолучитьДанныеЗадачи(Объект.JIRA);
	Если яРез.Успех Тогда
		ITC_JIRA.ЗаполнитьДанныеЗадачи(Объект, яРез.Данные);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура JIRA_Обновить(Команда)
	JIRA_ОбновитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура JIRA_Открыть(Команда)
	ЗапуститьПриложение("https://" + ITC_JIRA.АдресНашегоСайта() + "/browse/" + Объект.JIRA);
КонецПроцедуры

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
        УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
    УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры
&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
    УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация