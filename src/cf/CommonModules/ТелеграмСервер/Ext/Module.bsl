Процедура ПолучитьОбновленияБота(Бот) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Бот", Бот);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТелеграмБоты.Ссылка КАК Бот,
	|	ТелеграмБоты.Жетон КАК Жетон,
	|	ТелеграмБоты.Представление КАК Имя,
	|	ТелеграмБоты.КаталогСохраненияФайлов КАК КаталогСохраненияФайлов,
	|	ТелеграмБоты.ОграниченныйДоступ,
	|	ЕСТЬNULL(ТелеграмНастройкиБотов.Смещение, 0) КАК Смещение
	|ИЗ
	|	Справочник.ТелеграмБоты КАК ТелеграмБоты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТелеграмНастройкиБотов КАК ТелеграмНастройкиБотов
	|		ПО ТелеграмБоты.Ссылка = ТелеграмНастройкиБотов.Бот
	|ГДЕ
	|	ТелеграмБоты.Ссылка = &Бот";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеБота = Новый Структура("Бот, Жетон, Имя, КаталогСохраненияФайлов, Смещение, ОграниченныйДоступ");
		ЗаполнитьЗначенияСвойств(ДанныеБота, Выборка);
		ВходящиеОбновления = ПолучитьВходящиеОбновленияБота(ДанныеБота);
		Если ТипЗнч(ВходящиеОбновления) = Тип("ОбъектXDTO") Тогда
			ОбработатьВходящиеОбновленияБота(ВходящиеОбновления, ДанныеБота);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


Функция ПолучитьДанныеБотаПоКлючу(ВебхукКлюч) Экспорт
	
	Ответ = Неопределено; // ДанныеБота
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВебхукКлюч", ВебхукКлюч);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТелеграмБоты.Ссылка КАК Бот,
	|	ТелеграмБоты.Жетон КАК Жетон,
	|	ТелеграмБоты.Представление КАК Имя,
	|	ТелеграмБоты.КаталогСохраненияФайлов КАК КаталогСохраненияФайлов,
	|	ТелеграмБоты.ОграниченныйДоступ,
	|	ЕСТЬNULL(ТелеграмНастройкиБотов.Смещение, 0) КАК Смещение
	|ИЗ
	|	Справочник.ТелеграмБоты КАК ТелеграмБоты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТелеграмНастройкиБотов КАК ТелеграмНастройкиБотов
	|		ПО ТелеграмБоты.Ссылка = ТелеграмНастройкиБотов.Бот
	|ГДЕ
	|	ТелеграмБоты.ВебхукКлюч = &ВебхукКлюч
	|	И ТелеграмБоты.Статус = ЗНАЧЕНИЕ(Перечисление.ТелеграмСтатусыИспользования.Используется)
	|	И ТелеграмБоты.СпособПолученияОбновлений = ЗНАЧЕНИЕ(Перечисление.ТелеграмСпособыПолученияОбновлений.Вебхуки)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Ответ = Новый Структура("Бот, Жетон, Имя, КаталогСохраненияФайлов, Смещение, ОграниченныйДоступ");
		ЗаполнитьЗначенияСвойств(Ответ, Выборка);
		Прервать;
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции


Функция ПолучитьДанныеБота(Бот) Экспорт
	
	Ответ = Неопределено; // ДанныеБота
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Бот", Бот);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТелеграмБоты.Ссылка КАК Бот,
	|	ТелеграмБоты.Жетон КАК Жетон,
	|	ТелеграмБоты.Представление КАК Имя,
	|	ТелеграмБоты.КаталогСохраненияФайлов КАК КаталогСохраненияФайлов,
	|	ТелеграмБоты.ОграниченныйДоступ,
	|	ЕСТЬNULL(ТелеграмНастройкиБотов.Смещение, 0) КАК Смещение
	|ИЗ
	|	Справочник.ТелеграмБоты КАК ТелеграмБоты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТелеграмНастройкиБотов КАК ТелеграмНастройкиБотов
	|		ПО ТелеграмБоты.Ссылка = ТелеграмНастройкиБотов.Бот
	|ГДЕ
	|	ТелеграмБоты.Ссылка = &Бот";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Ответ = Новый Структура("Бот, Жетон, Имя, КаталогСохраненияФайлов, Смещение, ОграниченныйДоступ");
		ЗаполнитьЗначенияСвойств(Ответ, Выборка);
		Прервать;
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции


Функция ПараметрыЗаписиJSON() Экспорт
	
	ПереносСтрок = ПереносСтрокJSON.Авто;
	СимволыОтступа = Символы.Таб;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрок, СимволыОтступа);
	Возврат ПараметрыЗаписиJSON;
	
КонецФункции


Функция ФорматироватьСтрокуJSON(СтрокаJSON) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	ЗначениеОбъект = ПрочитатьJSON(ЧтениеJSON);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON());
	ЗаписатьJSON(ЗаписьJSON, ЗначениеОбъект);
	РезультатФорматирования = ЗаписьJSON.Закрыть();
	
	Возврат РезультатФорматирования;
	
КонецФункции


Функция ПреобразоватьТаблицуКонтекстаВСоответствие(ТаблицаКонтекста) Экспорт
	
	Ответ = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ТаблицаКонтекста Цикл
		Ответ.Вставить(СтрокаТаблицы.Параметр, СтрокаТаблицы.Значение);
	КонецЦикла;
	Возврат Ответ;
	
КонецФункции


Функция ЗначениеСтрокой(ЛюбоеЗначение) Экспорт
	
	Ответ = "";
	Если ТипЗнч(ЛюбоеЗначение) = Тип("Число") Тогда
		Ответ = Формат(ЛюбоеЗначение, "ЧГ=");
	Иначе
		Ответ = Строка(ЛюбоеЗначение);
	КонецЕсли;
	Возврат Ответ;
	
КонецФункции


Функция СравнениеИстинно(ЛевоеЗначение, ВидСравнения, ПравоеЗначение) Экспорт
	
	Перем Ответ;
	
	ВидыСравнения = Перечисления.ТелеграмВидыСравнения;
	
	ТипЛ = ТипЗнч(ЛевоеЗначение);
	ТипП = ТипЗнч(ПравоеЗначение);
	
	ТипЧисло 	= Тип("Число");
	ТипБулево 	= Тип("Булево");
	ТипСтрока 	= Тип("Строка");
	ТипДата 	= Тип("Дата");
	
	Ответ = Ложь;
	
	Если ВидСравнения = ВидыСравнения.Больше  Тогда
		Попытка
			Ответ = ЛевоеЗначение > ПравоеЗначение;
		Исключение
			Ответ = Ложь;
		КонецПопытки;
	ИначеЕсли ВидСравнения = ВидыСравнения.БольшеИлиРавно  Тогда
		Попытка
			Ответ = ЛевоеЗначение >= ПравоеЗначение;
		Исключение
			Ответ = Ложь;
		КонецПопытки;
	ИначеЕсли ВидСравнения = ВидыСравнения.Заполнено  Тогда
		Ответ = ЗначениеЗаполнено(ЛевоеЗначение);
	ИначеЕсли ВидСравнения = ВидыСравнения.Меньше  Тогда
		Попытка
			Ответ = ЛевоеЗначение < ПравоеЗначение;
		Исключение
			Ответ = Ложь;
		КонецПопытки;
	ИначеЕсли ВидСравнения = ВидыСравнения.МеньшеИлиРавно  Тогда
		Попытка
			Ответ = ЛевоеЗначение <= ПравоеЗначение;
		Исключение
			Ответ = Ложь;
		КонецПопытки;
	ИначеЕсли ВидСравнения = ВидыСравнения.НачинаетсяС  Тогда
		Если ТипЛ = ТипСтрока И ТипП = ТипСтрока Тогда
			ДлинаП = СтрДлина(ПравоеЗначение);
			ЧастьЛ = Лев(ЛевоеЗначение, ДлинаП);
			Ответ = (ВРег(ЧастьЛ) = ВРег(ПравоеЗначение));
		Иначе
			Ответ = Ложь;
		КонецЕсли;
	ИначеЕсли ВидСравнения = ВидыСравнения.НеЗаполнено  Тогда
		Ответ = НЕ ЗначениеЗаполнено(ЛевоеЗначение);
	ИначеЕсли ВидСравнения = ВидыСравнения.НеНачинаетсяС  Тогда
		Если ТипЛ = ТипСтрока И ТипП = ТипСтрока Тогда
			ДлинаП = СтрДлина(ПравоеЗначение);
			ЧастьЛ = Лев(ЛевоеЗначение, ДлинаП);
			Ответ = (ВРег(ЧастьЛ) <> ВРег(ПравоеЗначение));
		Иначе
			Ответ = Ложь;
		КонецЕсли;
	ИначеЕсли ВидСравнения = ВидыСравнения.НеРавно  Тогда
		Если ТипЗнч(ЛевоеЗначение) = ТипСтрока И ТипЗнч(ПравоеЗначение) = ТипСтрока Тогда
			Ответ = ВРег(ЛевоеЗначение) <> ВРег(ПравоеЗначение);
		Иначе
			Ответ = (ЛевоеЗначение <> ПравоеЗначение);
		КонецЕсли;
	ИначеЕсли ВидСравнения = ВидыСравнения.НеСодержит  Тогда
		Если ТипЛ = ТипСтрока И ТипП = ТипСтрока Тогда
			Ответ = (СтрНайти(ВРег(ЛевоеЗначение), ВРег(ПравоеЗначение)) = 0)
		Иначе
			Ответ = Ложь;
		КонецЕсли;
	ИначеЕсли ВидСравнения = ВидыСравнения.Равно  Тогда
		Если ТипЗнч(ЛевоеЗначение) = ТипСтрока И ТипЗнч(ПравоеЗначение) = ТипСтрока Тогда
			Ответ = ВРег(ЛевоеЗначение) = ВРег(ПравоеЗначение);
		Иначе
			Ответ = (ЛевоеЗначение = ПравоеЗначение);
		КонецЕсли;
	ИначеЕсли ВидСравнения = ВидыСравнения.Содержит  Тогда
		Если ТипЛ = ТипСтрока И ТипП = ТипСтрока Тогда
			Ответ = (СтрНайти(ВРег(ЛевоеЗначение), ВРег(ПравоеЗначение)) > 0)
		Иначе
			Ответ = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции


Функция ПолучитьВходящиеОбновленияБота(ДанныеБота) Экспорт
	
	СтруктураПараметров = Новый Структура;
	Если ЗначениеЗаполнено(ДанныеБота.Смещение) Тогда
		СтруктураПараметров.Вставить("offset", ДанныеБота.Смещение + 1);
	КонецЕсли;
	
	СтрокаJSON = ТелеграмAPI.ВыполнитьМетод(ДанныеБота, "getUpdates", СтруктураПараметров, Перечисления.ТелеграмСпособыЗапросов.Простой);
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	
	ВходящиеДанные = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON);
	Если ВходящиеДанные.ok = Ложь Тогда
		ТекстИсключения = СтрШаблон("Сервер Telegram вернул ошибку: error_code: %1, description: %2", ВходящиеДанные.error_code, ВходящиеДанные.description);
		ВызватьИсключение ТекстИсключения;
	Иначе
		Возврат ВходящиеДанные.result;
	КонецЕсли;
	
КонецФункции


Процедура ОбработатьВходящиеОбновленияБота(ВходящиеОбновления, ДанныеБота) Экспорт
	
	КоллекцияСвойств = ВходящиеОбновления.Свойства();
	Если КоллекцияСвойств.Получить("result") <> Неопределено Тогда
		
		Если ТипЗнч(ВходящиеОбновления.result) = Тип("ОбъектXDTO") Тогда
			Обновления = Новый Массив;
			Обновления.Добавить(ВходящиеОбновления.result);
		Иначе // СписокXDTO
			Обновления = ВходящиеОбновления.result;
		КонецЕсли;
		
		Для Каждого Обновление Из Обновления Цикл
			ОбработатьВходящееОбновлениеБота(Обновление, ДанныеБота);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ОбработатьВходящееОбновлениеБота(Обновление, ДанныеБота) Экспорт
	
	ИдентификаторОбновления = Обновление.update_id;
	
	КоллекцияСвойств = Обновление.Свойства();
	ОтветКонтекстнойКлавиатуры = Неопределено;
	Если КоллекцияСвойств.Получить("message") <> Неопределено Тогда
		ВидВходящегоОбновления = Перечисления.ТелеграмВидыВходящихОбновлений.Сообщение;
		Сообщение = Обновление.message;
	ИначеЕсли КоллекцияСвойств.Получить("inline_query") <> Неопределено Тогда
		ВидВходящегоОбновления = Перечисления.ТелеграмВидыВходящихОбновлений.ВстроенныйЗапрос;
		Сообщение = Неопределено;
	ИначеЕсли КоллекцияСвойств.Получить("chosen_inline_result") <> Неопределено Тогда
		ВидВходящегоОбновления = Перечисления.ТелеграмВидыВходящихОбновлений.ВыбранныйЛинейныйРезультат;
		Сообщение = Неопределено;
	ИначеЕсли КоллекцияСвойств.Получить("callback_query") <> Неопределено Тогда
		ВидВходящегоОбновления = Перечисления.ТелеграмВидыВходящихОбновлений.ОтветКонтекстнойКлавиатуры;
		КоллекцияСвойств = Обновление.callback_query.Свойства();
		Если КоллекцияСвойств.Получить("message") <> Неопределено Тогда
			Сообщение = Обновление.callback_query.message;
		Иначе
			Сообщение = Неопределено;
		КонецЕсли;
		ОтветКонтекстнойКлавиатуры = Обновление.callback_query.data;
	КонецЕсли;

	Если Сообщение = Неопределено Тогда
		ТекстСообщения = "";
		ИдентификаторЧата = Неопределено;
		ИдентификаторСообщения = Неопределено;
	Иначе
		КоллекцияСвойств = Сообщение.Свойства();
		Если КоллекцияСвойств.Получить("text") <> Неопределено Тогда
			ТекстСообщения = Сообщение.text;
		Иначе
			ТекстСообщения = "";
		КонецЕсли;
		ИдентификаторЧата = Сообщение.chat.id;
		ИдентификаторСообщения = Сообщение.message_id;
	КонецЕсли;
	
	ПозволитьДальнейшееОбщение = Истина;
	
	Если Сообщение <> Неопределено Тогда
		РегистрыСведений.ТелеграмСобеседники.ЗапомнитьСобеседника(Сообщение, ДанныеБота, ПозволитьДальнейшееОбщение);
	КонецЕсли;
	
	// Структура настроек пользователя. Состав структуры изменяется в РегистрыСведений.ТелеграмНастройкиПользователей.ПолучитьСоставНастроек()
	НастройкиПользователя = РегистрыСведений.ТелеграмНастройкиПользователей.ПолучитьНастройкиПользователя(ДанныеБота.Бот, ИдентификаторЧата);
			
	НакопленныеДанные = Новый Структура;
	НакопленныеДанные.Вставить("ДанныеБота", 					ДанныеБота);
	НакопленныеДанные.Вставить("ИдентификаторОбновления",		ИдентификаторОбновления);
	НакопленныеДанные.Вставить("ИдентификаторСообщения",		ИдентификаторСообщения);
	НакопленныеДанные.Вставить("ИдентификаторЧата", 			ИдентификаторЧата);
	НакопленныеДанные.Вставить("ВидВходящегоОбновления", 		ВидВходящегоОбновления);
	НакопленныеДанные.Вставить("Обновление", 					Обновление);
	НакопленныеДанные.Вставить("Сообщение", 					Сообщение);
	НакопленныеДанные.Вставить("ТекстСообщения",				ТекстСообщения);
	НакопленныеДанные.Вставить("НастройкиПользователя",			НастройкиПользователя);
	НакопленныеДанные.Вставить("ОтветКонтекстнойКлавиатуры",	ОтветКонтекстнойКлавиатуры);
	//{ DIRachkovsky@1cbit.ru
	Если ДанныеБота.Свойство("Пользователь") Тогда
		НакопленныеДанные.Вставить("Пользователь", ДанныеБота.Пользователь);
	Иначе
		НакопленныеДанные.Вставить("Пользователь", Справочники.Пользователи.ПустаяСсылка());
	КонецЕсли;
	//}
	
	РегистрыСведений.ТелеграмНастройкиБотов.СохранитьНастройкиБота(НакопленныеДанные); // Зафиксировать смещение до формирования ответа
	
	Если ДанныеБота.ОграниченныйДоступ = Истина И ПозволитьДальнейшееОбщение = Ложь Тогда
		Сообщение = Новый Структура;
		Сообщение.Вставить("ТекстСообщения", "Доступ к боту ограничен его настройками. Обратитесь к администратору бота, и после получения разрешения заново введите команду /start");
		ОтправитьСообщение(Сообщение, НакопленныеДанные);
		Возврат;
	КонецЕсли;
	
	ТелеграмСервисы = Справочники.ТелеграмСервис.ПолучитьСервисыДляВыполнения(НакопленныеДанные);
	
	Попытка
		КоличествоВыполненныхОбработок = 0;
		НакопленныеДанные.Вставить("ПрерватьОбработку",Ложь);
		Для Каждого ТелеграмСервис Из ТелеграмСервисы Цикл
			ТелеграмОбработки = Справочники.ТелеграмОбработка.ПолучитьОбработкиДляВыполнения(ТелеграмСервис, НакопленныеДанные);
			Для Каждого ТелеграмОбработка Из ТелеграмОбработки Цикл
				Если НакопленныеДанные.ПрерватьОбработку Тогда
					Прервать;
				КонецЕсли;
				Справочники.ТелеграмОбработка.ВыполнитьОбработку(ТелеграмОбработка, НакопленныеДанные);
				КоличествоВыполненныхОбработок = КоличествоВыполненныхОбработок + 1;
			КонецЦикла;
		КонецЦикла;
			
		Если КоличествоВыполненныхОбработок = 0 Тогда
			// Необходимо всё равно что-то вывести в ответ. За "что-то" отвечают обработки-исключения
			ТелеграмОбработки = Справочники.ТелеграмОбработка.ПолучитьОбработкиИсключения(НакопленныеДанные);
			Для Каждого ТелеграмОбработка Из ТелеграмОбработки Цикл
				Справочники.ТелеграмОбработка.ВыполнитьОбработку(ТелеграмОбработка, НакопленныеДанные);
			КонецЦикла;
		КонецЕсли;
	Исключение
		Сообщение = Новый Структура;
		Сообщение.Вставить("ТекстСообщения", "При формировании ответа возникла ошибка: " + ОписаниеОшибки());
		ОтправитьСообщение(Сообщение, НакопленныеДанные);
		ВызватьИсключение ОписаниеОшибки(); // Передать ошибку дальше, в фоновое задание
	КонецПопытки;
	
КонецПроцедуры


Функция ВставитьЭмодзи(РезультатСборки) Экспорт
	
	Ответ = РезультатСборки;
	
	МассивЭмодзи = Новый Массив;
	
	ИскатьС = 1;
	Позиция = СтрНайти(РезультатСборки, "Эмодзи_", , ИскатьС);
	Пока Позиция > 0 Цикл
		Эмодзи = Сред(РезультатСборки, Позиция, 12);
		МассивЭмодзи.Добавить(Эмодзи);
		ИскатьС = Позиция + 1;
		Позиция = СтрНайти(РезультатСборки, "Эмодзи_", , ИскатьС);
	КонецЦикла;
	
	Для Каждого Эмодзи Из МассивЭмодзи Цикл
		Представление = Сред(Эмодзи, 8);
		СпрЭмодзи = Справочники.ТелеграмЭмодзи.НайтиПоНаименованию(Представление, Истина);
		КодЭмодзи = СпрЭмодзи.Код;
		Юникод = "";
		Если ЗначениеЗаполнено(КодЭмодзи) Тогда
			Если СтрДлина(КодЭмодзи) = 4 Тогда
				Юникод = "\u" + КодЭмодзи;
			Иначе // 8
				Юникод = "\u" + Лев(КодЭмодзи, 4) + "\u" + Сред(КодЭмодзи, 5);
			КонецЕсли;
		КонецЕсли;
		Ответ = СтрЗаменить(Ответ, Эмодзи, Юникод);
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции


Функция ПолучитьМодельДляСборкиМетода(Метод) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Метод", Метод);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТелеграмМетоды.Метод КАК Метод,
	|	ТелеграмМетоды.Параметр КАК Параметр,
	|	ТелеграмМетоды.Параметр1С КАК Параметр1С,
	|	ТелеграмМетоды.ОбязательныйДляЗаполнения КАК ОбязательныйДляЗаполнения,
	|	ТелеграмМетоды.ОбязательныйДляПередачи КАК ОбязательныйДляПередачи,
	|	ТелеграмМетоды.ОсобеннаяСборка КАК ОсобеннаяСборка
	|ИЗ
	|	РегистрСведений.ТелеграмМетоды КАК ТелеграмМетоды
	|ГДЕ
	|	ТелеграмМетоды.Метод = &Метод
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТелеграмМетоды.Сортировка";
	Результат = Запрос.Выполнить();
	МодельДляСборки = Результат.Выгрузить();
	Возврат МодельДляСборки;
	
КонецФункции


Процедура ОсобеннаяСборкаПараметра(СтруктураОтправки, Сообщение, ЭлементМодели, НакопленныеДанные) Экспорт
	
	Если ЭлементМодели.Параметр = "chat_id" Тогда
		
		Если Сообщение.Свойство("ИдентификаторЧата") Тогда
			СтруктураОтправки.Вставить(ЭлементМодели.Параметр,
				Сообщение.ИдентификаторЧата);
		Иначе
			СтруктураОтправки.Вставить(ЭлементМодели.Параметр,
				НакопленныеДанные.ИдентификаторЧата);
		КонецЕсли;
		
	ИначеЕсли ЭлементМодели.Параметр = "reply_markup" Тогда
		
		Если Сообщение.Свойство("Клавиатура") Тогда
			СобраннаяКлавиатура = Справочники.ТелеграмКлавиатуры.СобратьКлавиатуру(
				Сообщение.Клавиатура, НакопленныеДанные);
				
			Если СобраннаяКлавиатура = Неопределено Тогда
				ТекстИсключения = "Не удалось собрать клавиатуру " + Сообщение.Клавиатура;
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			СтруктураОтправки.Вставить("reply_markup", СобраннаяКлавиатура);
		КонецЕсли;
		
	ИначеЕсли ЭлементМодели.Параметр = "message_id" Тогда
		
		Если Сообщение.Свойство("ИдентификаторСообщения") Тогда
			СтруктураОтправки.Вставить(ЭлементМодели.Параметр,
				Сообщение.ИдентификаторСообщения);
		Иначе
			СтруктураОтправки.Вставить(ЭлементМодели.Параметр,
				НакопленныеДанные.ИдентификаторСообщения);
		КонецЕсли;
		
	ИначеЕсли ЭлементМодели.Параметр = "photo"
		ИЛИ ЭлементМодели.Параметр = "video"
		ИЛИ ЭлементМодели.Параметр = "document"
		ИЛИ ЭлементМодели.Параметр = "audio"
		ИЛИ ЭлементМодели.Параметр = "voice" Тогда
		
		Если Сообщение.Свойство("ВходнойФайлСтруктура") = Истина Тогда
			Если Сообщение.ВходнойФайлСтруктура.ВидИсточника = "СерверТелеграм" Тогда
				СтруктураОтправки.Вставить(ЭлементМодели.Параметр, Сообщение.ВходнойФайлСтруктура.Источник);
			Иначе
				СтруктураОтправки.Вставить("ВходнойФайлСтруктура", Сообщение.ВходнойФайлСтруктура);
				СтруктураОтправки.ВходнойФайлСтруктура.Вставить("Ключ", ЭлементМодели.Параметр);
			КонецЕсли;
		Иначе
			ТекстИсключения = СтрШаблон("При формировании структуры отправки для метода %1 не обнаружено значение ВходнойФайлСтруктура", ЭлементМодели.Параметр);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


Функция СобратьСтруктуруОтправки(Сообщение, МодельДляСборки, НакопленныеДанные) Экспорт
	
	СтруктураОтправки = Новый Структура;
	
	Для Каждого ЭлементМодели Из МодельДляСборки Цикл
		
		Если ЭлементМодели.ОсобеннаяСборка Тогда
			ОсобеннаяСборкаПараметра(СтруктураОтправки, Сообщение, ЭлементМодели, НакопленныеДанные);
		Иначе
			ЗначениеПараметра = "";
			НаличиеПараметра = Сообщение.Свойство(ЭлементМодели.Параметр1С, ЗначениеПараметра);
			Если НаличиеПараметра = Истина Тогда
				СтруктураОтправки.Вставить(ЭлементМодели.Параметр, ЗначениеПараметра);
			ИначеЕсли ЭлементМодели.ОбязательныйДляЗаполнения = Истина Тогда
				ТекстИсключения = СтрШаблон("При формировании структуры отправки для метода %1 не обнаружен обязательный для заполнения параметр %2", ЭлементМодели.Метод, ЭлементМодели.Параметр1С);
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭлементМодели.ОбязательныйДляПередачи Тогда
			ПараметрЗаполнен = СтруктураОтправки.Свойство(ЭлементМодели.Параметр);
			Если НЕ ПараметрЗаполнен Тогда
				Если ЭлементМодели.Параметр1С = "ВходнойФайлСтруктура" Тогда
					Если СтруктураОтправки.Свойство("ВходнойФайлСтруктура") Тогда
						ПараметрЗаполнен = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ПараметрЗаполнен Тогда
				ТекстИсключения = СтрШаблон("При формировании структуры отправки для метода %1 не заполнен обязательный для передачи параметр %2", ЭлементМодели.Метод, ЭлементМодели.Параметр);
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураОтправки;
	
КонецФункции


Процедура ВыполнитьКодСборкиОтвета(КодСборки, НакопленныеДанные) Экспорт
	
	Выполнить(КодСборки);
	
КонецПроцедуры


// sendMessage
Процедура ОтправитьСообщение(Сообщение, НакопленныеДанные = Неопределено) Экспорт
	
	Метод = "sendMessage";
	СобратьВыполнитьМетод(Метод, Сообщение, НакопленныеДанные);
	
КонецПроцедуры


// sendPhoto
Процедура ОтправитьФотографию(Сообщение, НакопленныеДанные = Неопределено) Экспорт
	
	Метод = "sendPhoto";
	СобратьВыполнитьМетод(Метод, Сообщение, НакопленныеДанные);
	
КонецПроцедуры


// sendVideo
Процедура ОтправитьВидео(Сообщение, НакопленныеДанные = Неопределено) Экспорт
	
	Метод = "sendVideo";
	СобратьВыполнитьМетод(Метод, Сообщение, НакопленныеДанные);
	
КонецПроцедуры


// sendDocument
Процедура ОтправитьДокумент(Сообщение, НакопленныеДанные = Неопределено) Экспорт
	
	Метод = "sendDocument";
	СобратьВыполнитьМетод(Метод, Сообщение, НакопленныеДанные);
	
КонецПроцедуры


// sendAudio
Процедура ОтправитьАудио(Сообщение, НакопленныеДанные = Неопределено) Экспорт
	
	Метод = "sendAudio";
	СобратьВыполнитьМетод(Метод, Сообщение, НакопленныеДанные);
	
КонецПроцедуры


// sendVoice
Процедура ОтправитьГолос(Сообщение, НакопленныеДанные = Неопределено) Экспорт
	
	Метод = "sendVoice";
	СобратьВыполнитьМетод(Метод, Сообщение, НакопленныеДанные);
	
КонецПроцедуры


// sendLocation
Процедура ОтправитьМестоположение(Сообщение, НакопленныеДанные = Неопределено) Экспорт
	
	Метод = "sendLocation";
	СобратьВыполнитьМетод(Метод, Сообщение, НакопленныеДанные);
	
КонецПроцедуры


// sendVenue
Процедура ОтправитьМестоНаКарте(Сообщение, НакопленныеДанные = Неопределено) Экспорт
	
	Метод = "sendVenue";
	СобратьВыполнитьМетод(Метод, Сообщение, НакопленныеДанные);
	
КонецПроцедуры


// editMessageReplyMarkup
Процедура РедактироватьКонтекстнуюКлавиатуру(Сообщение, НакопленныеДанные = Неопределено) Экспорт
	
	Метод = "editMessageReplyMarkup";
	СобратьВыполнитьМетод(Метод, Сообщение, НакопленныеДанные);
	
КонецПроцедуры


// editMessageText
Процедура ИзменитьТекстСообщения(Сообщение, НакопленныеДанные = Неопределено) Экспорт
	
	Метод = "editMessageText";
	СобратьВыполнитьМетод(Метод, Сообщение, НакопленныеДанные);
	
КонецПроцедуры


// deleteMessage
Процедура УдалитьСообщение(Сообщение, НакопленныеДанные = Неопределено) Экспорт
	
	Метод = "deleteMessage";
	СобратьВыполнитьМетод(Метод, Сообщение, НакопленныеДанные);
	
КонецПроцедуры
	


Процедура СобратьВыполнитьМетод(Метод, Сообщение, НакопленныеДанные) Экспорт
	
	Если НакопленныеДанные = Неопределено Тогда
		НакопленныеДанные = Новый Структура;
	КонецЕсли;
	
	Если НакопленныеДанные.Свойство("ДанныеБота") = Истина Тогда
		ДанныеБота = НакопленныеДанные.ДанныеБота;
	Иначе
		Бот = Сообщение.Бот; // Ссылка на используемого бота
		ДанныеБота = ПолучитьДанныеБота(Бот);
	КонецЕсли;
	
	МодельДляСборки 	= ПолучитьМодельДляСборкиМетода(Метод);
	СтруктураОтправки 	= СобратьСтруктуруОтправки(Сообщение, МодельДляСборки, НакопленныеДанные);
	ПроверитьЗаполненностьПараметров(Метод, СтруктураОтправки); // выдаёт предупреждение на тот случай, если пользователь забыл заполнить регистр Методы... анализируется только случай с sendMessage
	ТелеграмAPI.ВыполнитьМетод(ДанныеБота, Метод, СтруктураОтправки);
	
КонецПроцедуры



Процедура ПроверитьЗаполненностьПараметров(Метод, СтруктураОтправки)
	
	Если Метод = "sendMessage" И СтруктураОтправки.Количество() = 0 Тогда
		Сообщить("Для корректной работы бота необходимо обновить версию подсистемы, кнопка ""Обновление версии""");
	КонецЕсли;
	
КонецПроцедуры



Функция ПолучитьИнформациюОФайлахСообщения(Сообщение)
	
	Ответ = Новый Массив;
	
	Если ТипЗнч(Сообщение) = Тип("ОбъектXDTO") Тогда
		
		КоллекцияСвойств = Сообщение.Свойства();
		
		Если КоллекцияСвойств.Получить("audio") <> Неопределено Тогда
			ЭлементОтвета = Новый Структура(
				"ИдентификаторФайла, ИмяФайла",
				Сообщение.audio.file_id,
				"");
			Ответ.Добавить(ЭлементОтвета);	
		КонецЕсли;
		
		Если КоллекцияСвойств.Получить("document") <> Неопределено Тогда
			ЭлементОтвета = Новый Структура(
				"ИдентификаторФайла, ИмяФайла",
				Сообщение.document.file_id,
				Сообщение.document.file_name);
			Ответ.Добавить(ЭлементОтвета);	
		КонецЕсли;
		
		Если КоллекцияСвойств.Получить("photo") <> Неопределено Тогда
			Для Каждого Фото Из Сообщение.photo.photo Цикл
			КонецЦикла;
			ЭлементОтвета = Новый Структура(
				"ИдентификаторФайла, ИмяФайла",
				Фото.file_id,
				"");
			Ответ.Добавить(ЭлементОтвета); // последний элемент не был сжат
		КонецЕсли;
		
		Если КоллекцияСвойств.Получить("sticker") <> Неопределено Тогда
			ЭлементОтвета = Новый Структура(
				"ИдентификаторФайла, ИмяФайла",
				Сообщение.sticker.file_id,
				"");
			Ответ.Добавить(ЭлементОтвета);	
		КонецЕсли;
		
		Если КоллекцияСвойств.Получить("video") <> Неопределено Тогда
			ЭлементОтвета = Новый Структура(
				"ИдентификаторФайла, ИмяФайла",
				Сообщение.video.file_id,
				"");
			Ответ.Добавить(ЭлементОтвета);	
		КонецЕсли;
		
		Если КоллекцияСвойств.Получить("voice") <> Неопределено Тогда
			ЭлементОтвета = Новый Структура(
				"ИдентификаторФайла, ИмяФайла",
				Сообщение.voice.file_id,
				"");
			Ответ.Добавить(ЭлементОтвета);	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции


Функция ПолучитьКаталогСохранения(НакопленныеДанные)
	
	ИмяКаталогаБота 		= НакопленныеДанные.ДанныеБота.КаталогСохраненияФайлов;
	ИмяПапкиПоДате			= Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd");
	ИмяКаталогаСохранения 	= ИмяКаталогаБота + "\" + ИмяПапкиПоДате;
	
	Если НЕ ЗначениеЗаполнено(ИмяКаталогаБота) Тогда
		ТекстИсключения = "Ошибка при загрузке файла: не заполнено значение ""Каталог сохранения файлов"" бота " + НакопленныеДанные.ДанныеБота.Имя;
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	КаталогСохранения = Новый Файл(ИмяКаталогаСохранения);
	Если КаталогСохранения.Существует() = ЛОЖЬ Тогда
		СоздатьКаталог(ИмяКаталогаСохранения);
	КонецЕсли;
	
	Возврат ИмяКаталогаСохранения;
	
КонецФункции


Функция СобратьИмяФайлаСохранения(НакопленныеДанные, СтрокаИнформации, ПутьФайлаСервер)
	
	ВремяПолучения 			= Формат(ТекущаяДата(), "ДФ=ЧЧ-мм-сс");
	ИдентификаторЧата 		= Формат(НакопленныеДанные.ИдентификаторЧата, "ЧГ=");
	ИдентификаторСообщения 	= Формат(НакопленныеДанные.ИдентификаторСообщения, "ЧГ=");
	
	Если НЕ ПустаяСтрока(СтрокаИнформации.ИмяФайла) Тогда
		ПравоеИмяФайла = СтрокаИнформации.ИмяФайла;
	Иначе
		ПравоеИмяФайла = СтрЗаменить(ПутьФайлаСервер, "/", "-");
	КонецЕсли;
	
	ИмяФайлаСохранения = ВремяПолучения + "-" + ИдентификаторЧата + "-" + ИдентификаторСообщения + "-" + ПравоеИмяФайла;
	Возврат ИмяФайлаСохранения;
	
КонецФункции


Процедура ЗагрузитьФайл(НакопленныеДанные) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НакопленныеДанные.Вставить("ЗагруженныйФайл", Неопределено);
	
	Сообщение 			= НакопленныеДанные.Сообщение;
	ИнформацияОФайлах 	= ПолучитьИнформациюОФайлахСообщения(Сообщение);
	
	Запрос 		= ТелеграмAPI.СоздатьЗапрос();
	Соединение 	= ТелеграмAPI.СоздатьСоединение();
	
	Для Каждого СтрокаИнформации Из ИнформацияОФайлах Цикл
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("file_id", СтрокаИнформации.ИдентификаторФайла);
		ОтветJSON = ТелеграмAPI.ВыполнитьМетод(НакопленныеДанные.ДанныеБота, "getFile", СтруктураПараметров, Перечисления.ТелеграмСпособыЗапросов.Простой);
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ОтветJSON);
		
		ОтветСтруктура = ПрочитатьJSON(ЧтениеJSON);
		Если ОтветСтруктура.ok = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьФайлаСервер 	= ОтветСтруктура.result.file_path;
		ЛокальныйПутьФайла 	= ПолучитьКаталогСохранения(НакопленныеДанные);
		ЛокальноеИмяФайла	= СобратьИмяФайлаСохранения(НакопленныеДанные, СтрокаИнформации, ПутьФайлаСервер);
		ПолноеИмяФайла 		= ЛокальныйПутьФайла + "\" + ЛокальноеИмяФайла;
		
		Запрос.АдресРесурса = СтрШаблон("/file/bot%1/%2", НакопленныеДанные.ДанныеБота.Жетон, ПутьФайлаСервер);
		Соединение.Получить(Запрос, ПолноеИмяФайла); // Исключения передаются наверх и попадают в ответ
		НакопленныеДанные.ЗагруженныйФайл = ПолноеИмяФайла;
		Прервать;
		
	КонецЦикла;
	
КонецПроцедуры


Функция ПодсказкаПоСтруктуреНакопленныеДанные() Экспорт
	
	Ответ = ПолучитьОбщийМакет("ТелеграмПодсказкаПоСтруктуреНакопленныеДанные").ПолучитьТекст();
	Возврат Ответ;
	
КонецФункции