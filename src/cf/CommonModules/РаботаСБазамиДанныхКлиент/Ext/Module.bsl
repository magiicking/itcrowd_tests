Асинх Функция СоздатьИнформационнуюБазу(Задача, Сервер, НачальныйОбраз = Неопределено) Экспорт
	ДанныеСервера = РаботаСБазамиДанныхВызовСервера.ПолучитьДанныеДляСозданияБазы(Задача, Сервер, НачальныйОбраз);
	ПутьКФайлуПлатформы = Ждать ПолучитьПутьКФайлуПлатформы(ДанныеСервера.СерверПлатформа);
	
	Если ЗначениеЗаполнено(НачальныйОбраз) Тогда
		ПутьВременногоФайлаНачальногоОбраза = Ждать ПолучитьПутьВременногоФайлаНачальногоОбраза(НачальныйОбраз, ДанныеСервера.КаталогВременныхФайлов);
	КонецЕсли;
	
	КаталогРепозитория = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ДанныеСервера.КаталогВременныхФайлов,ДанныеСервера.НомерЗадачи+"_repo");
	
	ИмяЛогаСоздания = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ДанныеСервера.КаталогВременныхФайлов,ДанныеСервера.НомерЗадачи+"Creation.log");
	
	НайденныеФайлы = Ждать НайтиФайлыАсинх(КаталогРепозитория);
	Если НайденныеФайлы.Количество() = 0 Тогда
		Ждать СоздатьКаталогАсинх(КаталогРепозитория);	
	КонецЕсли;	
		
	СтрокаСоединенияСозданияБазы = "";
	СтрокаСоединенияИспользованияБазы = "";
	КаталогБазы = "";
	
	Если ДанныеСервера.ТипСервера = "Файловый" Тогда
		СтрокаСоединенияСозданияБазы = "File=""%1"";";
		СтрокаСоединенияИспользованияБазы = "File=""%1"";Usr=""%2"";Pwd=""%3"";";
		КаталогБазы = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ДанныеСервера.КаталогВременныхФайлов,ДанныеСервера.НомерЗадачи);
		
		НайденныеФайлы = Ждать НайтиФайлыАсинх(КаталогБазы);
		Если НайденныеФайлы.Количество() = 0 Тогда
			Ждать СоздатьКаталогАсинх(КаталогБазы);
		КонецЕсли;
		
		СтрокаСоединенияСозданияБазы = СтрШаблон(СтрокаСоединенияСозданияБазы, КаталогБазы);
		СтрокаСоединенияИспользованияБазы = СтрШаблон(СтрокаСоединенияИспользованияБазы, КаталогБазы, ДанныеСервера.БазаЛогин, ДанныеСервера.БазаПароль);
		
	Иначе
        // TODO: проверить создание серверной базы
		СтрокаСоединенияСозданияБазы = "Srvr=""%1"";Ref=""%2"";DBMS=""%3"";DBSrvr=""%4"";DB=""%5"";DBUID=""%6"";DBPwd=""%7"";SQLYOffs=2000;CrSQLDB=Y;SUsr=""8%"";SPwd=""%9"";";
		СтрокаСоединенияИспользованияБазы = "Srvr=""%1"";Ref=""%2"";Usr=""%2"";Pwd=""%3"";";
		
		СтрокаСоединенияСозданияБазы = СтрШаблон(СтрокаСоединенияСозданияБазы, 
			ДанныеСервера.СерверАдрес + ?(ЗначениеЗаполнено(ДанныеСервера.СерверПорт), ":"+ДанныеСервера.СерверПорт, ""),
			ДанныеСервера.НомерЗадачи,
			ДанныеСервера.СУБДТип,
			ДанныеСервера.СУБДАдрес,
			ДанныеСервера.НомерЗадачи,
			ДанныеСервера.СУБДЛогин,
			ДанныеСервера.СУБДПароль,
			ДанныеСервера.СерверЛогин,
			ДанныеСервера.СерверПароль);
		СтрокаСоединенияИспользованияБазы = СтрШаблон(СтрокаСоединенияИспользованияБазы, КаталогБазы, ДанныеСервера.БазаЛогин, ДанныеСервера.БазаПароль);
	КонецЕсли;
	
	СтрокаСоединенияСозданияБазы = СтрокаСоединенияСозданияБазы + СтрШаблон(" /AddInList ""%1""", ДанныеСервера.НомерЗадачи);
	
	Если ЗначениеЗаполнено(НачальныйОбраз) Тогда
		СтрокаСоединенияСозданияБазы = СтрокаСоединенияСозданияБазы + СтрШаблон(" /UseTemplate ""%1""", ПутьВременногоФайлаНачальногоОбраза);	
	КонецЕсли; 
	
	СкриптЗапускаСозданияБазы = СтрШаблон("""%1"" CREATEINFOBASE %2 /Out %3", ПутьКФайлуПлатформы, СтрокаСоединенияСозданияБазы, ИмяЛогаСоздания);
	
	ВыполнениеСкриптовWScriptShellКлиент.ВыполнитьСкрипт(СкриптЗапускаСозданияБазы,,1); 
	
	МассивРезультатов = Новый Массив;
	ТекстСтатуса = Новый ЧтениеТекста(ИмяЛогаСоздания,КодировкаТекста.UTF8);
	ТекСтрока = "";
	Пока ТекСтрока <> Неопределено Цикл
		ТекСтрока = ТекстСтатуса.ПрочитатьСтроку();
		Если ТекСтрока <> Неопределено Тогда
			МассивРезультатов.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	ТекстСтатуса.Закрыть();
	
	БазаСозданаУспешно = Истина;
	
	Если МассивРезультатов.Количество() > 0 
		И Не СтрНайти(МассивРезультатов[0],"успешно завершено") Тогда
		БазаСозданаУспешно = Ложь;
		ПредупреждениеАсинх("Не удалось создать базу. Подробности в файле " + ИмяЛогаСоздания);
	Иначе
		УдалитьФайлыАсинх(ИмяЛогаСоздания);
	КонецЕсли;
	
	Если БазаСозданаУспешно Тогда
		ДанныеБазы = Новый Структура();
		Если ДанныеСервера.ТипСервера = "Файловый" Тогда
			ДанныеБазы.Вставить("Адрес", КаталогБазы); 
		Иначе
			
		КонецЕсли;
		ДанныеБазы.Вставить("Задача", Задача);
		ДанныеБазы.Вставить("Сервер", Сервер);
		ДанныеБазы.Вставить("СтрокаПодключения", СтрокаСоединенияИспользованияБазы);
		ДанныеБазы.Вставить("АдресЛокальногоРепозитория", КаталогРепозитория);
		Возврат РаботаСБазамиДанныхВызовСервера.СоздатьБазуВСправочнике(ДанныеБазы);
	КонецЕсли;
КонецФункции

Асинх Функция ПодключитьИнформационнуюБазуКВеткеКода(База,ВеткаКода) Экспорт
	
	Отказ = Ложь;
	ДанныеВетки = РаботаСБазамиДанныхВызовСервера.ПолучитьДанныеВеткиКода(ВеткаКода);
	ДанныеБазы = РаботаСБазамиДанныхВызовСервера.ПолучитьДанныеБазы(База);
	
	РезультатПроверки = Ждать РаботаСГитКлиент.ЭтоГитРепозиторийАсинх(ДанныеБазы.АдресЛокальногоРепозитория);
	Если Не РезультатПроверки.Успешно Тогда
		Ждать РаботаСГитКлиент.КлонироватьРепозиторийАсинх(ДанныеБазы.АдресЛокальногоРепозитория, ДанныеВетки.АдресРепозитория);	
	КонецЕсли; 
	
	Если Не Отказ Тогда
		Ждать ОбработатьФайлыИнформационнойБазыПоВеткеКода(База,ВеткаКода,Ложь);
	КонецЕсли;
КонецФункции  

Асинх Функция ОбработатьФайлыИнформационнойБазыПоВеткеКода(База,ВеткаКода,ЭтоВыгрузка=Истина) Экспорт
	
	Отказ = Ложь;
	ДанныеВетки = РаботаСБазамиДанныхВызовСервера.ПолучитьДанныеВеткиКода(ВеткаКода);
	ДанныеБазы = РаботаСБазамиДанныхВызовСервера.ПолучитьДанныеБазы(База);
	СтрокаПодключения = ДанныеБазы.СтрокаПодключения;
	
	СтрокаПодключения = СтрШаблон("/IBConnectionString %1 %2 ""%3""", 
		СтрокаПодключения,
		?(ЭтоВыгрузка,"/DumpConfigToFiles","/LoadConfigFromFiles"), 
		ДанныеБазы.АдресЛокальногоРепозитория);
				
	Ждать ГарантированноПерейтиНаВеткуГит(ДанныеВетки,ДанныеБазы.АдресЛокальногоРепозитория,Отказ);
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПутьКФайлуПлатформы = Ждать ПолучитьПутьКФайлуПлатформы(ДанныеБазы.Платформа);
	СкриптЗапускаБазы = СтрШаблон("""%1"" DESIGNER %2", ПутьКФайлуПлатформы, СтрокаПодключения);
	ВыполнениеСкриптовWScriptShellКлиент.ВыполнитьСкрипт(СкриптЗапускаБазы,,1); 
	
КонецФункции 

#Область СлужебныеФункции

Асинх Функция ПолучитьПутьКФайлуПлатформы(Платформа)
	ВерсияПлатформы = РаботаСБазамиДанныхВызовСервера.ПолучитьВерсиюПлатформы(Платформа);
	Путь64 = СтрШаблон("C:\Program Files\1cv8\%1\bin\1cv8.exe",ВерсияПлатформы);
	Путь32 = СтрШаблон("C:\Program Files (x86)\1cv8\%1\bin\1cv8.exe",ВерсияПлатформы);
	
	НайденныеФайлы = Ждать НайтиФайлыАсинх(Путь64);
	Если НайденныеФайлы.Количество() > 0 Тогда
		Возврат НайденныеФайлы[0].ПолноеИмя;
	КонецЕсли;
	
	НайденныеФайлы = Ждать НайтиФайлыАсинх(Путь32);
	Если НайденныеФайлы.Количество() > 0 Тогда
		Возврат НайденныеФайлы[0].ПолноеИмя;
	КонецЕсли;
	
	ВызватьИсключение СтрШаблон("Не удалось найти установленную платформу версии %1", ВерсияПлатформы);
КонецФункции         

Асинх Функция ПолучитьПутьВременногоФайлаНачальногоОбраза(НачальныйОбраз, ПапкаВременныхФайлов)
	ИмяФайла = РаботаСБазамиДанныхВызовСервера.ПолучитьХешДанныхНачальногоОбраза(НачальныйОбраз);
	Если ПустаяСтрока(ИмяФайла) Тогда
		ВызватьИсключение "Начальный образ не содержит данных.";
	КонецЕсли;
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПапкаВременныхФайлов,ИмяФайла+".dt");
	НайденныеФайлы = Ждать НайтиФайлыАсинх(ИмяФайла);
	Если НайденныеФайлы.Количество() = 0 Тогда
		АдресДанных = РаботаСБазамиДанныхВызовСервера.ПолучитьДанныеНачальногоОбраза(НачальныйОбраз);
		ДвоичныеДанныеОбраза = ПолучитьИзВременногоХранилища(АдресДанных);
		Попытка
			Ждать ДвоичныеДанныеОбраза.ЗаписатьАсинх(ИмяФайла);
		Исключение
			ВызватьИсключение "Начальный образ не удалось записать. " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЕсли;
	Возврат ИмяФайла;
КонецФункции 

Асинх Функция ГарантированноПерейтиНаВеткуГит(ДанныеВетки,АдресЛокальногоРепозитория,Отказ) 
	ИмяВеткиРепозитория = Ждать РаботаСГитКлиент.ИмяТекущейВеткиГитАсинх(АдресЛокальногоРепозитория);
	
	Если ИмяВеткиРепозитория.Успешно Тогда
		Если ДанныеВетки.ИмяВетки <> ИмяВеткиРепозитория.Сообщение Тогда
			Если ИмяВеткиРепозитория.Сообщение <> ДанныеВетки.ИмяВеткиОснования Тогда
				РезультатПерехода = Ждать РаботаСГитКлиент.ПерейтиНаВеткуАсинх(АдресЛокальногоРепозитория, ДанныеВетки.ИмяВеткиОснования); 
				Если Не РезультатПерехода.Успешно Тогда	
					Ждать РаботаСГитКлиент.ОбработатьОшибкуРаботыСГит(РезультатПерехода, Отказ);
				КонецЕсли;
			КонецЕсли; 
			
			Если Не Отказ Тогда
				РезультатПерехода = Ждать РаботаСГитКлиент.ПерейтиНаВеткуАсинх(АдресЛокальногоРепозитория, ДанныеВетки.ИмяВетки);
				Если Не РезультатПерехода.Успешно Тогда
					Если СтрНайти(РезультатПерехода.Сообщение,"она не существует") Тогда
						РезультатПерехода = Ждать РаботаСГитКлиент.ПерейтиНаВеткуАсинх(АдресЛокальногоРепозитория, ДанныеВетки.ИмяВетки, Истина);
						Если Не РезультатПерехода.Успешно Тогда
							Ждать РаботаСГитКлиент.ОбработатьОшибкуРаботыСГит(РезультатПерехода, Отказ);
						КонецЕсли;
					Иначе
						Ждать РаботаСГитКлиент.ОбработатьОшибкуРаботыСГит(РезультатПерехода, Отказ);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		РаботаСГитКлиент.ОбработатьОшибкуРаботыСГит(ИмяВеткиРепозитория, Отказ);
	КонецЕсли;
КонецФункции   

#КонецОбласти