
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Задача = Параметры.Задача;
	
	Репозиторий = Задача.Проект.Репозиторий;
	ВеткаОснование = Репозиторий.Мастер;
	Проект = Задача.Проект;
	
	ЦветЗеленый = ЦветаСтиля.РезультатУспехЦвет;
	ЦветКрасный = ЦветаСтиля.ЦветОсобогоТекста;
	
	Сервер = РегистрыСведений.СерверыПользователей.ПолучитьСерверПользователя();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ITC_ВеткаКода.Ссылка КАК Ссылка,
		|	ITC_ВеткаКода.ВеткаОснование КАК ВеткаОснование
		|ИЗ
		|	Справочник.ITC_ВеткаКода КАК ITC_ВеткаКода
		|ГДЕ
		|	ITC_ВеткаКода.Задача = &Задача";
	
	Запрос.УстановитьПараметр("Задача", Задача);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВДЗ = РезультатЗапроса.Выбрать();
		ВДЗ.Следующий();
		Ветка = ВДЗ.Ссылка;
		ВеткаОснование = ВДЗ.ВеткаОснование; 
		ВеткаПриИзмененииНаСервере();
    КонецЕсли;
	
	МассивБазПоЗадаче = РегистрыСведений.БазыПоЗадачам.ПолучитьБазыПоЗадаче(Задача);
	
	КоличествоБазПоЗадаче = МассивБазПоЗадаче.Количество();
	
	Если КоличествоБазПоЗадаче = 1 Тогда
		База = МассивБазПоЗадаче[0];
		БазаПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписиИДоступностьНаФормеКлиент()
	// Надписи
	Если ЗначениеЗаполнено(Сервер) Тогда
		Элементы.НадписьСервер.Заголовок = "Сервер выбран";
		Элементы.НадписьСервер.ЦветТекста = ЦветЗеленый;	
	Иначе
		Элементы.НадписьСервер.Заголовок = "Нужно выбрать сервер";
		Элементы.НадписьСервер.ЦветТекста = ЦветКрасный;
	КонецЕсли;    
	
	Если ЗначениеЗаполнено(Ветка) Тогда
		Элементы.НадписьВетка.Заголовок = "Ветка выбрана";
		Элементы.НадписьВетка.ЦветТекста = ЦветЗеленый;
	Иначе
		Элементы.НадписьВетка.Заголовок = "Нужно выбрать/создать ветку";
		Элементы.НадписьВетка.ЦветТекста = ЦветКрасный;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(База) Тогда
		Элементы.НадписьВетка.Заголовок = "База выбрана";
		Элементы.НадписьВетка.ЦветТекста = ЦветЗеленый;
	ИначеЕсли КоличествоБазПоЗадаче = 0 Тогда
		Элементы.НадписьВетка.Заголовок = "Нужно создать базу";
		Элементы.НадписьВетка.ЦветТекста = ЦветКрасный;
	Иначе
		Элементы.НадписьВетка.Заголовок = "Нужно создать/выбрать базу";
		Элементы.НадписьВетка.ЦветТекста = ЦветКрасный;	
	КонецЕсли;
	
	// Доступность
	Элементы.Ветка.Доступность = ЗначениеЗаполнено(Сервер);                          
	Элементы.СоздатьВетку.Доступность = Элементы.Ветка.Доступность И Не ЗначениеЗаполнено(Ветка) И ЗначениеЗаполнено(ВеткаОснование);
	Элементы.ВеткаОснование.Доступность = Элементы.Ветка.Доступность И Не ЗначениеЗаполнено(Ветка);
	Элементы.База.Доступность = Элементы.Ветка.Доступность И ЗначениеЗаполнено(Ветка);
	Элементы.СоздатьБазу.Доступность = Элементы.База.Доступность И Не ЗначениеЗаполнено(База);
	Элементы.ПодключитьБазуКВыбраннойВетке.Доступность = ЗначениеЗаполнено(База) И ЗначениеЗаполнено(Ветка);
	Элементы.ЗафиксироватьИзменения.Доступность = ЗначениеЗаполнено(База) И ЗначениеЗаполнено(Ветка);
	Элементы.ПолучитьИзмененияИзВетки.Доступность = ЗначениеЗаполнено(База) И ЗначениеЗаполнено(Ветка);
	Элементы.ПеренестиИзмененияИзТекущейБазыВДев.Доступность = ЗначениеЗаполнено(База) И ЗначениеЗаполнено(Ветка);
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьДоступностьПолейИКоманд()
	
КонецПроцедуры

&НаСервере
Процедура СерверПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(Сервер) Тогда
		РегистрыСведений.СерверыПользователей.УстановитьСерверПользователя(Сервер);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СерверПриИзменении(Элемент)
	СерверПриИзмененииНаСервере();
	ОбновитьНадписиИДоступностьНаФормеКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьНадписиИДоступностьНаФормеКлиент();
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьВеткуНаСервере(Задача,Репозиторий,ВеткаОснование)
	НомерЗадачи = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Задача.JIRA_ID, "");
	
	ВеткаОбъект = Справочники.ITC_ВеткаКода.СоздатьЭлемент();
	ВеткаОбъект.Владелец = Репозиторий;
	ВеткаОбъект.ВеткаОснование = ВеткаОснование;
	ВеткаОбъект.УстановитьНовыйКод();
	ВеткаОбъект.Наименование = НомерЗадачи;
	
	ВеткаОбъект.Записать();
	
	Возврат ВеткаОбъект.Ссылка;
КонецФункции

&НаКлиенте
Асинх Процедура СоздатьВетку(Команда)
	Если Не ЗначениеЗаполнено(Репозиторий) Тогда
		ПредупреждениеАсинх("Не удалось создать ветку, не заполнен репозиторий в проекте задачи.");
		Возврат;
	КонецЕсли;
	Ветка = СоздатьВеткуНаСервере(Задача,Репозиторий,ВеткаОснование);
	ОбновитьНадписиИДоступностьНаФормеКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ВеткаПриИзменении(Элемент)
	ОбновитьНадписиИДоступностьНаФормеКлиент();
	ВеткаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВеткаПриИзмененииНаСервере()
	Данные = РаботаСБазамиДанныхВызовСервера.ПолучитьДанныеВеткиКода(Ветка);
	ДанныеВетки = Новый ФиксированнаяСтруктура(Данные);
КонецПроцедуры

&НаКлиенте
Асинх Процедура СоздатьБазу(Команда)
	База = Ждать РаботаСБазамиДанныхКлиент.СоздатьИнформационнуюБазу(Задача,Сервер,НачальныйОбраз);
	КоличествоБазПоЗадаче = КоличествоБазПоЗадаче + 1;
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПодключитьБазуКВыбраннойВетке(Команда)
	Ждать РаботаСБазамиДанныхКлиент.ПодключитьИнформационнуюБазуКВеткеКода(База,Ветка);
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗафиксироватьИзменения(Команда)
	Успешно = Истина;
	
	Если ПустаяСтрока(СообщениеКоммит) ТОгда
		мСообщение = Новый СообщениеПользователю;
		мСообщение.Текст = "Не заполнено сообщение коммита.";
		мСообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Результат = Ждать РаботаСГитКлиент.ПерейтиНаВеткуАсинх(ДанныеБазы.АдресЛокальногоРепозитория, ДанныеВетки.ИмяВетки);
	Если Результат.Успешно Тогда
		
		мСообщение = Новый СообщениеПользователю;
		мСообщение.Текст = СтрШаблон("Успешный переход на ветку %1", ДанныеВетки.ИмяВетки);
		мСообщение.Сообщить();
		
		Ждать РаботаСБазамиДанныхКлиент.ОбработатьФайлыИнформационнойБазыПоВеткеКода(База,Ветка,Истина);
		
		мСообщение = Новый СообщениеПользователю;
		мСообщение.Текст = "Выгружены файлы конфигурации из базы";
		мСообщение.Сообщить();
		
		Результат = Ждать РаботаСГитКлиент.ЗафиксироватьИзмененияАсинх(ДанныеБазы.АдресЛокальногоРепозитория, СообщениеКоммит);
		Если Результат.Успешно Тогда
			
			мСообщение = Новый СообщениеПользователю;
			мСообщение.Текст = "Изменения успешно зафиксированы в локальном репозитории";
			мСообщение.Сообщить();
			
			Результат = Ждать РаботаСГитКлиент.ОтправитьИзмененияВУдаленныйРепозиторийАсинх(ДанныеБазы.АдресЛокальногоРепозитория);
			Если Результат.Успешно Тогда
				мСообщение = Новый СообщениеПользователю;
				мСообщение.Текст = "Изменения успешно отправлены в удаленный репозиторий";
				мСообщение.Сообщить();
			Иначе	
				мСообщение = Новый СообщениеПользователю;
				мСообщение.Текст = Результат.Сообщение;
				мСообщение.Сообщить();
				Успешно = Ложь;
			КонецЕсли;
		Иначе
			мСообщение = Новый СообщениеПользователю;
			мСообщение.Текст = Результат.Сообщение;
			мСообщение.Сообщить();
			Успешно = Ложь;
		КонецЕсли;
	Иначе
		мСообщение = Новый СообщениеПользователю;
		мСообщение.Текст = Результат.Сообщение;
		мСообщение.Сообщить();
		Успешно = Ложь;
	КонецЕсли;
	
	Если Успешно Тогда
		мСообщение = Новый СообщениеПользователю;
		мСообщение.Текст = "Изменения успешно зафиксированы.";
		мСообщение.Сообщить();
	Иначе
		мСообщение = Новый СообщениеПользователю;
		мСообщение.Текст = "Не удалось зафиксировать изменения.";
		мСообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура БазаПриИзмененииНаСервере()
	Данные = РаботаСБазамиДанныхВызовСервера.ПолучитьДанныеБазы(База);
	ДанныеБазы = Новый ФиксированнаяСтруктура(Данные);
КонецПроцедуры

&НаКлиенте
Процедура БазаПриИзменении(Элемент)
	БазаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПолучитьИзмененияИзВетки(Команда)
	Успешно = Истина;
	
	Результат = Ждать РаботаСГитКлиент.ПолучитьИзмененияУдаленногоРепозиторияАсинх(ДанныеБазы.АдресЛокальногоРепозитория);
	Если Результат.Успешно Тогда
		
		мСообщение = Новый СообщениеПользователю;
		мСообщение.Текст = "Изменения успешно получены из удаленного репозитория";
		мСообщение.Сообщить();
		
		Результат = Ждать РаботаСГитКлиент.ОбновитьВеткуИзУдаленногоРепозиторияАсинх(ДанныеБазы.АдресЛокальногоРепозитория, ДанныеВетки.ИмяВетки);
		Если Результат.Успешно Тогда
			мСообщение = Новый СообщениеПользователю;
			мСообщение.Текст = "Локальный репозиторий успешно обновлен";
			мСообщение.Сообщить();
			
			Ждать РаботаСБазамиДанныхКлиент.ОбработатьФайлыИнформационнойБазыПоВеткеКода(База,Ветка, Ложь);
			
			мСообщение = Новый СообщениеПользователю;
			мСообщение.Текст = "Загрузка конфигурации в инофрмационную базу выполнена";
			мСообщение.Сообщить();
		Иначе
			мСообщение = Новый СообщениеПользователю;
			мСообщение.Текст = Результат.Сообщение;
			мСообщение.Сообщить();
			Успешно = Ложь;
		КонецЕсли;
	Иначе
		мСообщение = Новый СообщениеПользователю;
		мСообщение.Текст = Результат.Сообщение;
		мСообщение.Сообщить();
		Успешно = Ложь;
	КонецЕсли;
	
	Если Успешно Тогда
		мСообщение = Новый СообщениеПользователю;
		мСообщение.Текст = "Изменения успешно получены.";
		мСообщение.Сообщить();
	Иначе
		мСообщение = Новый СообщениеПользователю;
		мСообщение.Текст = "Не удалось получить изменения.";
		мСообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПеренестиИзмененияИзТекущейБазыВДев(Команда)
	Успешно = Истина;
	
	Результат = Ждать РаботаСГитКлиент.ОбъединитьВеткиПоНаименованиямАсинх(ДанныеБазы.АдресЛокальногоРепозитория, ДанныеВетки.ИмяВеткиДев, ДанныеВетки.ИмяВетки);
	Если Результат.Успешно Тогда
		мСообщение = Новый СообщениеПользователю;
		мСообщение.Текст = "Слияние веток выполнено успешно в локальном репозитории";
		мСообщение.Сообщить();
		
		Результат = Ждать РаботаСГитКлиент.ОтправитьИзмененияВУдаленныйРепозиторийАсинх(ДанныеБазы.АдресЛокальногоРепозитория, ДанныеВетки.ИмяВеткиДев);
		Если Результат.Успешно Тогда
			мСообщение = Новый СообщениеПользователю;
			мСообщение.Текст = "Изменения успешно отправлены в удаленный репозиторий";
			мСообщение.Сообщить();
		Иначе	
			мСообщение = Новый СообщениеПользователю;
			мСообщение.Текст = Результат.Сообщение;
			мСообщение.Сообщить();
			Успешно = Ложь;
		КонецЕсли;
		
	Иначе
		мСообщение = Новый СообщениеПользователю;
		мСообщение.Текст = Результат.Сообщение;
		мСообщение.Сообщить();
		Успешно = Ложь;
	КонецЕсли; 
	
	Если Успешно Тогда
		мСообщение = Новый СообщениеПользователю;
		мСообщение.Текст = "Слияние выполнено успешно.";
		мСообщение.Сообщить();
	Иначе
		мСообщение = Новый СообщениеПользователю;
		мСообщение.Текст = "Не удалось выполнить слияние.";
		мСообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры
