#Область ОбщегоНазначения
Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт

	Возврат Константы[ИмяКонстанты].Получить();	

КонецФункции // ПолучитьЗначениеКонстанты()

//СценарийИзФичи - строка из фичи, в которой код спр выделен % с двух сторон и размещен в начале строки 
Функция НайтиСпрПоСценариюИзФичи(СценарийИзФичи)

	СпрСценарийВанессыСсылка = Справочники.ВА_СценарииВанессы.ПустаяСсылка();
	ПозицияСимвола1 = СтрНайти(СценарийИзФичи,"%",,,1);	
	ПозицияСимвола2 = СтрНайти(СценарийИзФичи,"%",,,2);	
	НаименованиеСпр = ""; 
	КодСпр = "";	
	
	Если ПозицияСимвола1 <> 0 И  ПозицияСимвола2 <> 0 Тогда
		СтрДо = Лев(СценарийИзФичи,ПозицияСимвола1 - 1);
		СтрМеждуСимволами = Сред(СценарийИзФичи,ПозицияСимвола1,ПозицияСимвола2 - ПозицияСимвола1 + 1);
		СтрПосле = Прав(СценарийИзФичи,СтрДлина(СценарийИзФичи) - ПозицияСимвола2);
		КодСпр = СтрМеждуСимволами;	 
		КодСпр = СтрЗаменить(КодСпр," ","");
		НаименованиеСпр = КодСпр + " " + СтрДо + СтрПосле; 
		КодСпр = СтрЗаменить(КодСпр,"%","");
	Иначе
		Сообщить("Ошибка! В сценарии фича файла не задан %КодДляСвязкиСоСправочником%. Заполните сценарии без привязки с справочнику. См. Запуск тестов ванессы.");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодСпр) Тогда
		СпрСценарийВанессыСсылка = Справочники.ВА_СценарииВанессы.НайтиПоКоду(КодСпр);
		Если СпрСценарийВанессыСсылка = Справочники.ВА_СценарииВанессы.ПустаяСсылка() Тогда
			СпрСценарийВанессы = Справочники.ВА_СценарииВанессы.СоздатьЭлемент();		
		    СпрСценарийВанессы.Код = КодСпр;
		    СпрСценарийВанессы.Наименование = НаименованиеСпр;
			СпрСценарийВанессы.Записать();
			СпрСценарийВанессыСсылка = СпрСценарийВанессы.Ссылка; 
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат СпрСценарийВанессыСсылка;
КонецФункции

Функция ПолучитьПапкуЛокальныхРепозиториевГита(Пользователь = Неопределено) Экспорт //#DIP-64  КурцовАИ 2022.09.30
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	ПапкаЛокальныхРепозиториевГита = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь,"ПапкаЛокальныхРепозиториевГита");	
	
	Возврат ПапкаЛокальныхРепозиториевГита;
	
КонецФункции	

#КонецОбласти

#Область ЗапускТестов

Функция ПолучитьБазуКлиентаТестированияПоПути(ПутьКИнфобазе)

	База = Справочники.ITC_База.ПустаяСсылка(); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ITC_База.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ITC_База КАК ITC_База
		|ГДЕ
		|	""Srvr="" + """""""" + ITC_База.Сервер.ИмяСервера + """""""" + "";Ref="" + """""""" + ITC_База.Адрес + """""""" + "";"" = &ПутьКИнфобазе";
			
	Запрос.УстановитьПараметр("ПутьКИнфобазе", ПутьКИнфобазе);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		База = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;;

	Возврат База;
	
КонецФункции

//Входящие данные
//ДопПарметры - структура
//ДопПарметры.База - спр База.Ссылка
Процедура ЗаполнитьПараметрыЗапускаТестовПоБазе(ДопПарметры) Экспорт
	
	//#DIP-64  КурцовАИ 2022.09.30 ++
	ПапкаЛокальныхРепозиториевГита = ПолучитьПапкуЛокальныхРепозиториевГита(); 
		
	БазаРезвизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДопПарметры.База,"Наименование,СтрокаПодключения ,Адрес,Сервер,АдресЛокальногоРепозитория");
	БазаСервер_ИмяСервера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БазаРезвизиты.Сервер,"ИмяСервера");	
	//ВанессаПутьБазе = "Srvr=" + """" + БазаРезвизиты.Адрес + """"  +  ";Ref=" + """" + БазаСервер_ИмяСервера + """";  // #DIP-61 КурцовАИ 2022.10.07
	ВанессаПутьБазе = БазаРезвизиты.СтрокаПодключения; // #DIP-61 КурцовАИ 2022.10.07
	ВанессаДопПараметры = Константы.ПараметрыЗапускаКлиентаТестированияБазовые.Получить();  

	БазовыйКаталогРезультатовТестов = ПапкаЛокальныхРепозиториевГита + ?(Прав(ПапкаЛокальныхРепозиториевГита,1) = "\","","\") + "TestResults";  
	КаталогФич = БазаРезвизиты.АдресЛокальногоРепозитория + ?(Прав(БазаРезвизиты.АдресЛокальногоРепозитория,1) = "\","","\") + "tests";  
	ФайлНастроек = КаталогФич + "\VAParams.json"; 
 	//#DIP-64  КурцовАИ 2022.09.30 --
	
	
	ДопПарметры.Вставить("ПапкаЛокальныхРепозиториевГита",ПапкаЛокальныхРепозиториевГита);	
	ДопПарметры.Вставить("КаталогФич",КаталогФич);		
	ДопПарметры.Вставить("ФайлНастроек",ФайлНастроек); 
	ДопПарметры.Вставить("БазаНаименование",БазаРезвизиты.Наименование); 
	ДопПарметры.Вставить("БазаАдрес",БазаРезвизиты.Адрес); 
	ДопПарметры.Вставить("БазаСервер_ИмяСервера",БазаСервер_ИмяСервера); 
	ДопПарметры.Вставить("ВанессаПутьБазе",ВанессаПутьБазе); 
	ДопПарметры.Вставить("ВанессаДопПараметры",ВанессаДопПараметры); 
	ДопПарметры.Вставить("БазовыйКаталогРезультатовТестов",БазовыйКаталогРезультатовТестов); 
	
	ДопПарметры.Вставить("ИмяКлиентаТестирования",БазаРезвизиты.Наименование);
	
КонецПроцедуры

Функция ПолучитьДанныеСпрЗапускТеста(МассивСценариев, ДанныеКлиентаТестирования) Экспорт

	ЗапускТеста = Справочники.ВА_ЗапускТестовВанессы.СоздатьЭлемент();  
	ЗапускТеста.ВремяЗапуска = ТекущаяДата();
	ВремяСтрокой = СтрЗаменить(Формат(ЗапускТеста.ВремяЗапуска, "ДФ=yyyy.MM.dd") + " " + Формат(ЗапускТеста.ВремяЗапуска,"ДФ=hh.mm.ss" ),":","."); 
	ЗапускТеста.Пользователь = ПараметрыСеанса.ТекущийПользователь; 
	ЗапускТеста.Наименование = ВремяСтрокой + " " + ПараметрыСеанса.ТекущийПользователь;
	
	Если ДанныеКлиентаТестирования.Свойство("ПутьКИнфобазе") Тогда
		БазаКлиентаТестирования = ПолучитьБазуКлиентаТестированияПоПути(ДанныеКлиентаТестирования.ПутьКИнфобазе);
	Иначе
		ОбщегоНазначения.СообщитьПользователю("Выполнение теста отменено. Не определен текущий клиент тестирования и путь к инфобазе");	
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(БазаКлиентаТестирования) Тогда
		ОбщегоНазначения.СообщитьПользователю("Выполнение теста отменено. Не удалось установить связь базы тестирования и справочника Базы. Проверьте заполнение справочника Базы.");	
		Возврат Неопределено;
	КонецЕсли;   
	
	ЗапускТеста.База = БазаКлиентаТестирования;
	ДанныеСпрЗапускТеста = Новый Структура;
	ДанныеСпрЗапускТеста.Вставить("База",БазаКлиентаТестирования);
	ЗаполнитьПараметрыЗапускаТестовПоБазе(ДанныеСпрЗапускТеста); 
	
	БазовыйКаталогРезультатовТестов = ДанныеСпрЗапускТеста.БазовыйКаталогРезультатовТестов;

	ЗапускТеста.Записать();
	ЗапускТеста.ПутьКаталогаТеста = БазовыйКаталогРезультатовТестов + "\" + ВремяСтрокой + "_" + ЗапускТеста.Ссылка.УникальныйИдентификатор();

	Если МассивСценариев.Количество() <> 0 Тогда
		Для каждого Элемент Из МассивСценариев Цикл
			НоваяСтрока = ЗапускТеста.Сценарии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Элемент);
			СпрСценарийВанессыСсылка = НайтиСпрПоСценариюИзФичи(Элемент.Имя);
			Если ЗначениеЗаполнено(СпрСценарийВанессыСсылка) Тогда
				НоваяСтрока.СценарийВанессы = СпрСценарийВанессыСсылка;
			Иначе
				ЗапускТеста.ЕстьОшибка = Истина;
				ДанныеСпрЗапускТеста.Вставить("Отказ",Истина);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;	
	
	ЗапускТеста.Записать();
	
	ДанныеСпрЗапускТеста.Вставить("ЗапускТестаСсылка",ЗапускТеста.Ссылка);
	ДанныеСпрЗапускТеста.Вставить("ВремяЗапуска",ЗапускТеста.ВремяЗапуска);
	ДанныеСпрЗапускТеста.Вставить("ПутьКаталогаТеста",ЗапускТеста.ПутьКаталогаТеста);
	
	Возврат ДанныеСпрЗапускТеста;

КонецФункции // ()

Процедура ЗафиксироватьПодключенияКлиентовТестирования(ЗапускТеста,ДанныеЗапускаКлиентаТестирования) Экспорт   
	
 	МенеджерЗаписи = РегистрыСведений.ВА_ПодключенияКлиентовТестирования.СоздатьМенеджерЗаписи();
	
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи,ДанныеЗапускаКлиентаТестирования);
	МенеджерЗаписи.УИД = Новый УникальныйИдентификатор;
	МенеджерЗаписи.ЗапускТеста = ЗапускТеста;
	
	МенеджерЗаписи.Записать();	
		
КонецПроцедуры

#КонецОбласти

#Область РезультатыВыполненияТестов    

Процедура ДействияПослеВыполненияТестов(Дерево, ПараметрыОтчетаУФ,ВанессаНаСервере) Экспорт //КурцовАИ 16.08.2022

	ЗаписатьВРСРезультатТеста(Дерево, ПараметрыОтчетаУФ, Неопределено, ВанессаНаСервере.ЗапускТеста);
	ВанессаНаСервере.ЗапускТеста = Справочники.ВА_ЗапускТестовВанессы.ПустаяСсылка();
	
КонецПроцедуры   	
 
Процедура ЗаписатьВРСРезультатТеста(Дерево, ПараметрыОтчетаУФ, ДанныеВРС = Неопределено, ЗапускТеста) Экспорт //КурцовАИ 16.08.2022
	
	ЗапускТеста_ЕстьОшибка = Ложь;
	
	Для каждого СтрСтроки Из Дерево.Строки Цикл 
		
		ЕстьОшибка = Ложь;
		Если СтрСтроки.Тип = "Каталог" Тогда
			//	
		ИначеЕсли СтрСтроки.Тип = "Фича" Тогда 
			
			ДанныеВРС = Новый Структура();	  
			ДанныеВРС.Вставить("АдресФичи",СтрСтроки.ПолныйПуть);
			ДанныеВРС.Вставить("ЗапускТеста",ЗапускТеста);
			ДанныеВРС.Вставить("ДатаВыполнения",ТекущаяДата());
			ДанныеВРС.Вставить("ЕстьОшибка",Ложь);
			ДанныеВРС.Вставить("ОписаниеОшибки","");
			ДанныеВРС.Вставить("СтрокаОшибки","");
			ДанныеВРС.Вставить("НомерСтрокиОшибки",0);
			
		ИначеЕсли СтрСтроки.Тип = "Сценарий" Тогда 
			ДанныеВРС.Вставить("ИмяСценария",СтрСтроки.Имя);			
			ДанныеВРС.Вставить("СтатусСценария",СтрСтроки.Статус);			
		ИначеЕсли СтрСтроки.Тип = "ШагСценарий" Тогда  
			//
		ИначеЕсли СтрСтроки.Тип = "Шаг" Тогда 
			
			Если СтрСтроки.Статус = "Failed" Тогда
				ИДВМассиве = ПараметрыОтчетаУФ.МассивИДСтрокиДерева[СтрСтроки.Родитель.ИДСтроки];
				Если ИДВМассиве <> Неопределено Тогда 
					РезультатПрохожденияТестовСценария = ПараметрыОтчетаУФ.МассивРезультатПрохожденияТестовСценария[ИДВМассиве];
					//ПараметрыОтчетаУФ.МассивРезультатПрохожденияТестовСценария[ИДВМассиве].МассивСкриншотов;
					Если РезультатПрохожденияТестовСценария <> Неопределено Тогда 
						ДанныеВРС.Вставить("СтрокаОшибки",СтрСтроки.Имя);
						ДанныеВРС.Вставить("ОписаниеОшибки", РезультатПрохожденияТестовСценария.ОписаниеОшибки);
						ДанныеВРС.Вставить("ЕстьОшибка",Истина);
						ДанныеВРС.Вставить("НомерСтрокиОшибки", ПараметрыОтчетаУФ.МассивРезультатПрохожденияТестовСценария[ИДВМассиве].НомерСтрокиВФиче); 
						ЗапускТеста_ЕстьОшибка = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
		
		Если СтрСтроки.Строки.Количество() > 0 Тогда 
			ЗаписатьВРСРезультатТеста(СтрСтроки, ПараметрыОтчетаУФ, ДанныеВРС, ЗапускТеста);
		КонецЕсли;
		
		Если СтрСтроки.Тип = "Фича" Тогда
			ЗаписатьДанныеВРС_РезультатВыполненияТестов(ДанныеВРС);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗапускТеста_ЕстьОшибка Тогда
		ЗапускТестаОбъект = ЗапускТеста.ПолучитьОбъект();	
		ЗапускТестаОбъект.ЕстьОшибка = Истина;
		ЗапускТестаОбъект.Записать();
	КонецЕсли; 
	
КонецПроцедуры       

Процедура ЗаписатьДанныеВРС_РезультатВыполненияТестов(ДанныеВРС)
	
	Если ДанныеВРС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = ДанныеВРС.ОписаниеОшибки;
	СтрДоНомер = СтрНайти(ОписаниеОшибки,"Технические данные");
	Если СтрДоНомер <> 0 Тогда
		ОписаниеОшибки = Лев(ОписаниеОшибки,СтрДоНомер - 2);	
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ВА_РезультатВыполненияТестов.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи,ДанныеВРС);
	МенеджерЗаписи.УИД = Новый УникальныйИдентификатор; 
	МенеджерЗаписи.СценарийВанессы = НайтиСпрПоСценариюИзФичи(ДанныеВРС.ИмяСценария);
	МенеджерЗаписи.ОписаниеОшибки = ОписаниеОшибки;
	
	МенеджерЗаписи.Записать();	
	
КонецПроцедуры

#КонецОбласти           


 #Область РезультатыВыполненияТестов     
 
 Функция ПодключениеБазыУникально(СтрокаПодключения, БазаСсылка = Неопределено) Экспорт
	 
	ПодключениеБазыУникально = Истина; 
	Если БазаСсылка = Неопределено Тогда
		БазаСсылка = Справочники.ITC_База.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ITC_База.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ITC_База КАК ITC_База
		|ГДЕ
		|	ITC_База.СтрокаПодключения = &СтрокаПодключения
		|	И ITC_База.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", БазаСсылка);
	Запрос.УстановитьПараметр("СтрокаПодключения", СтрокаПодключения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда	
		ПодключениеБазыУникально = Ложь; 	
	КонецЕсли;
	
	Возврат ПодключениеБазыУникально;
	
 КонецФункции // ()
  
 
 #КонецОбласти 