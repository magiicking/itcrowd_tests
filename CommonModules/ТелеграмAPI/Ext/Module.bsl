Функция ЗащищенноеСоединение() Экспорт
	
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	Возврат ЗащищенноеСоединение;
	
КонецФункции


Функция ИнтернетПрокси() Экспорт
	
	ИнтернетПрокси = Новый ИнтернетПрокси;
	
	//БИТ
	ИнтернетПрокси.Установить("https","socks5://zbx.grotem.com",8080,"userproxy","hGdupHJgdg4S");
	Возврат ИнтернетПрокси;
	
КонецФункции


Функция Таймаут() Экспорт
	
	Возврат 20;
	
КонецФункции


Функция СоздатьЗапрос(ТипСодержимого = Неопределено) Экспорт
	
	Запрос = Новый HTTPЗапрос;
	Запрос.Заголовки.Вставить("Connection", "keep-alive");
	Если ЗначениеЗаполнено(ТипСодержимого) Тогда
		Запрос.Заголовки.Вставить("Content-type", ТипСодержимого);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции


Функция СоздатьСоединение() Экспорт
	
	Соединение = Новый HTTPСоединение("api.telegram.org",             
		,
		,
		,
		ИнтернетПрокси(),
		Таймаут(),
		ЗащищенноеСоединение()
		);
	Возврат Соединение;	
	
КонецФункции



Функция СобратьАдресРесурса(НакопленныеДанные)
	
	Жетон 				= НакопленныеДанные.ДанныеБота.Жетон;
	Метод 				= НакопленныеДанные.Метод;
	СтруктураПараметров = НакопленныеДанные.СтруктураПараметров;
	
	// Сборка параметров метода строкой
	ПараметрыМетодаСтрокой = "";
	Если НакопленныеДанные.СпособЗапроса = Перечисления.ТелеграмСпособыЗапросов.Простой Тогда
		Для Каждого КлючИЗначение Из СтруктураПараметров Цикл
			Если ПараметрыМетодаСтрокой <> "" Тогда
				ПараметрыМетодаСтрокой = ПараметрыМетодаСтрокой + "&";
			КонецЕсли;                                                                   
			ЗначениеСтрокой = ТелеграмСервер.ЗначениеСтрокой(КлючИЗначение.Значение);
			ПараметрыМетодаСтрокой = ПараметрыМетодаСтрокой + КлючИЗначение.Ключ + "=" + ЗначениеСтрокой;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыМетодаСтрокой <> "" Тогда
		ПараметрыМетодаСтрокой = "?" + ПараметрыМетодаСтрокой;
	КонецЕсли;
	
	АдресРесурса = СтрШаблон("/bot%1/%2%3", Жетон, Метод, ПараметрыМетодаСтрокой);
	
	Возврат АдресРесурса;
	
КонецФункции


Функция СобратьТелоЗапроса(НакопленныеДанные)
	
	Перем РезультатСборки;
	
	СпособЗапроса 		= НакопленныеДанные.СпособЗапроса;
	СтруктураПараметров = НакопленныеДанные.СтруктураПараметров;
	
	СпособыЗапроса 		= Перечисления.ТелеграмСпособыЗапросов;
	Если СпособЗапроса = СпособыЗапроса.Простой Тогда
		
		РезультатСборки = Неопределено;
		
	ИначеЕсли СпособЗапроса = СпособыЗапроса.Джейсон Тогда
		
		ЗаписьДжейсон = Новый ЗаписьJSON;
		ЗаписьДжейсон.ПроверятьСтруктуру = Ложь;
		ЗаписьДжейсон.УстановитьСтроку(ТелеграмСервер.ПараметрыЗаписиJSON());
		ЗаписатьJSON(ЗаписьДжейсон, СтруктураПараметров);
		РезультатСборки = ЗаписьДжейсон.Закрыть();
		РезультатСборки = ТелеграмСервер.ВставитьЭмодзи(РезультатСборки);
		
	ИначеЕсли СпособЗапроса = СпособыЗапроса.Кодированный Тогда
		
		РезультатСборки = "";
		Для Каждого КлючИЗначение Из СтруктураПараметров Цикл
			Если РезультатСборки <> "" Тогда
				РезультатСборки = РезультатСборки + "&";
			КонецЕсли;
			ЗначениеСтрокой = ТелеграмСервер.ЗначениеСтрокой(КлючИЗначение.Значение);
			КодированноеЗначение = КодироватьСтроку(ЗначениеСтрокой, СпособКодированияСтроки.КодировкаURL, КодировкаТекста.UTF8);
			РезультатСборки = РезультатСборки + КлючИЗначение.Ключ + "=" + КодированноеЗначение;
		КонецЦикла;
		
	ИначеЕсли СпособЗапроса = СпособыЗапроса.Мультипарт Тогда
		
		СобираемыеФайлы = Новый Массив;
		
		Запрос 			= НакопленныеДанные.Запрос;
		ТипСодержимого 	= Запрос.Заголовки.Получить("Content-type");
		Разделитель 	= Сред(ТипСодержимого, 31); // После Boundary=
		
		ТекстСообщения = "";
		
		// Сборка сообщения - простые данные
		Для Каждого КлючИЗначение Из СтруктураПараметров Цикл
			ЗначениеСтрокой = ТелеграмСервер.ЗначениеСтрокой(КлючИЗначение.Значение);
			ТекстСообщения = ТекстСообщения + "--" + Разделитель + Символы.ПС;
			ТекстСообщения = ТекстСообщения + "Content-Disposition: form-data; name=""" + КлючИЗначение.Ключ + """" + Символы.ПС + Символы.ПС;
			ТекстСообщения = ТекстСообщения + ЗначениеСтрокой + Символы.ПС;
		КонецЦикла;
		
		// Сборка сообщения — шапка для двоичных данных
		ВходнойФайлСтруктура = НакопленныеДанные.ВходнойФайлСтруктура;
		
		ТекстСообщения = ТекстСообщения + "--" + Разделитель + Символы.ПС;
		ТекстСообщения = ТекстСообщения + "Content-Disposition: form-data; name=""" + ВходнойФайлСтруктура.Ключ + """";
		Если ВходнойФайлСтруктура.Свойство("ИмяФайла") Тогда
			ТекстСообщения = ТекстСообщения + "; filename=""" + ВходнойФайлСтруктура.ИмяФайла + """";
		КонецЕсли;
		ТекстСообщения = ТекстСообщения + Символы.ПС + Символы.ПС;
		
		// Запись текста сообщения во временный файл
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
		ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
		ЗаписьТекста.Записать(ТекстСообщения);
		ЗаписьТекста.Закрыть();
		СобираемыеФайлы.Добавить(ИмяВременногоФайла);
		
		// Подготовка отправляемого файла
		Если ВходнойФайлСтруктура.ВидИсточника = "Файл" Тогда
			ИмяОтправляемогоФайла = ВходнойФайлСтруктура.Источник;
		ИначеЕсли ВходнойФайлСтруктура.ВидИсточника = "АдресВХранилище" Тогда
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВходнойФайлСтруктура.Источник);
			ИмяОтправляемогоФайла = ПолучитьИмяВременногоФайла("tmp");
			ДвоичныеДанные.Записать(ИмяОтправляемогоФайла);
		ИначеЕсли ВходнойФайлСтруктура.ВидИсточника = "ДвоичныеДанные" Тогда
			ИмяОтправляемогоФайла = ПолучитьИмяВременногоФайла("tmp");
			ДвоичныеДанные = ВходнойФайлСтруктура.Источник;
			ДвоичныеДанные.Записать(ИмяОтправляемогоФайла);
		КонецЕсли;
		СобираемыеФайлы.Добавить(ИмяОтправляемогоФайла);
		
		// обрамление сборки
		ТекстСообщения = "" + Символы.ПС;
		ТекстСообщения = ТекстСообщения + "--" + Разделитель + "--";
		ИмяВременногоФайла 	= ПолучитьИмяВременногоФайла("txt");
		ЗаписьТекста		= Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
		ЗаписьТекста.Записать(ТекстСообщения);
		ЗаписьТекста.Закрыть();
		СобираемыеФайлы.Добавить(ИмяВременногоФайла);
		
		// сборка
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("tmp");
		ОбъединитьФайлы(СобираемыеФайлы, ИмяВременногоФайла);
		
		// Результат сборки
		РезультатСборки = Новый Файл(ИмяВременногоФайла);
		
		ФайлыКУдалению = Новый Массив;
		Для Каждого СобираемыйФайл Из СобираемыеФайлы Цикл
			ФайлыКУдалению.Добавить(СобираемыйФайл);
		КонецЦикла;
		ФайлыКУдалению.Добавить(ИмяВременногоФайла);
		НакопленныеДанные.Вставить("ФайлыКУдалению", ФайлыКУдалению);
		
	КонецЕсли;
	
	Возврат РезультатСборки;
	
КонецФункции


Функция ВыполнитьМетод(ДанныеБота, Метод, СтруктураПараметров = Неопределено, СпособЗапроса = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
	КонецЕсли;
	
	// Автоподбор способа ХТТП запроса
	Если СпособЗапроса = Неопределено Тогда
		СпособЗапроса = Перечисления.ТелеграмСпособыЗапросов.ПодобратьСпособЗапроса(Метод, СтруктураПараметров);
	КонецЕсли;
	
	// Перемещение двоичных данных в другую структуру
	Если СтруктураПараметров.Свойство("ВходнойФайлСтруктура") = Истина Тогда
		ВходнойФайлСтруктура = СтруктураПараметров.ВходнойФайлСтруктура;
		СтруктураПараметров.Удалить("ВходнойФайлСтруктура");
	Иначе
		ВходнойФайлСтруктура = Неопределено;
	КонецЕсли;
	
	// Инициализация ХТТП запроса
	Запрос = СоздатьЗапрос(Перечисления.ТелеграмСпособыЗапросов.ТипСодержимого(СпособЗапроса));
	
	// Структуризация данных
	НакопленныеДанные = Новый Структура;
	НакопленныеДанные.Вставить("ДанныеБота", 				ДанныеБота);
	НакопленныеДанные.Вставить("Метод", 					Метод);
	НакопленныеДанные.Вставить("Запрос", 					Запрос);
	НакопленныеДанные.Вставить("СпособЗапроса", 			СпособЗапроса);
	НакопленныеДанные.Вставить("СтруктураПараметров", 		СтруктураПараметров);
	НакопленныеДанные.Вставить("ВходнойФайлСтруктура",		ВходнойФайлСтруктура);
	
	// Сборка ХТТП запроса
	Запрос.АдресРесурса = СобратьАдресРесурса(НакопленныеДанные);
	ТелоЗапроса = СобратьТелоЗапроса(НакопленныеДанные);
	Если ТипЗнч(ТелоЗапроса) = Тип("Строка") Тогда
		Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	ИначеЕсли ТипЗнч(ТелоЗапроса) = Тип("ДвоичныеДанные") Тогда
		Запрос.УстановитьТелоИзДвоичныхДанных(ТелоЗапроса);
	ИначеЕсли ТипЗнч(ТелоЗапроса) = Тип("Файл") Тогда
		Запрос.УстановитьИмяФайлаТела(ТелоЗапроса.ПолноеИмя);
	КонецЕсли;
	
	// Инициализация ХТТП соединения
	Соединение = СоздатьСоединение();
	
	// Отправка ПОСТ-запроса, получение ответа
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	
	// Удаление временных файлов, если необходимо
	Если НакопленныеДанные.Свойство("ФайлыКУдалению") = Истина Тогда
		ФайлыКУдалению = НакопленныеДанные.ФайлыКУдалению;
		Для Каждого ФайлКУдалению Из ФайлыКУдалению Цикл
			УдалитьФайлы(КаталогВременныхФайлов(), ФайлКУдалению);
		КонецЦикла;
	КонецЕсли;
	
	СтрокаJSON = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	РегистрыСведений.ТелеграмЖурнал.ДобавитьЗапись(ДанныеБота.Бот, СтрокаJSON, Метод);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СтрокаJSON;
	
КонецФункции