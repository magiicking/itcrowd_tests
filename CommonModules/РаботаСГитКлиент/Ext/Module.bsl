Функция ПроверитьНаличиеГит() Экспорт
	ПроверитьВебКлиент();
	КодВозврата = ВыполнениеСкриптовWScriptShellКлиент.ВыполнитьСкрипт("git -h",,0,Истина);
	Возврат КодВозврата = 0;
КонецФункции    

Асинх Функция ЭтоГитРепозиторийАсинх(ПутьКПапке) Экспорт
	
	Результат = ПодготовитьСтруктуруРезультата();
	
	Если Ждать ПапкаСуществуетАсинх(ПутьКПапке) Тогда
		РезультатКоманды = Ждать ВыполнитьКомандуГитАсинх(ПутьКПапке, "status", Истина);
		Результат.Данные = РезультатКоманды;
		Если РезультатКоманды.Количество() > 0 И ТипЗнч(РезультатКоманды[0]) = Тип("Строка") Тогда
			Результат.Успешно = СтрНайти(РезультатКоманды[0], "not a git repository") = 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Асинх Функция ИмяТекущейВеткиГитАсинх(ПутьКПапке) Экспорт
	
	РезультатКоманды = Ждать ВыполнитьКомандуГитАсинх(ПутьКПапке, "status");
	Результат = ПодготовитьСтруктуруРезультата(РезультатКоманды);
	
	Если НайтиСтрокуВМассиве(РезультатКоманды, "On branch ") Тогда
		Результат.Успешно = Истина;
		Результат.Сообщение = СокрЛП(СтрЗаменить(РезультатКоманды[0], "On branch ",""));
	Иначе
		Результат.Сообщение = "Не удалось получить имя ветки";
	КонецЕсли;	
	
	Возврат Результат; 

КонецФункции

Асинх Функция ПерейтиНаВеткуАсинх(ПутьКПапке,ИмяВетки,СоздатьНовую=Ложь) Экспорт
	
	ПроверкаИзменений = Ждать ЕстьЛокальныеИзмененияАсинх(ПутьКПапке);
	Если ПроверкаИзменений.Успешно И ПроверкаИзменений.Данные = Истина Тогда
		РезультатВопроса = Ждать ВопросАсинх(
			"В локальном репозитории есть изменения. Точно переключиться на другую ветку?",
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет,
			"Подтверждение переключения ветки");
		Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
			Возврат ПодготовитьСтруктуруРезультата();
		КонецЕсли;
	КонецЕсли;
	
	РезультатКоманды = Ждать ВыполнитьКомандуГитАсинх(ПутьКПапке, "checkout" + ?(СоздатьНовую," -b "," ") + ИмяВетки);
	Результат = ПодготовитьСтруктуруРезультата(РезультатКоманды);
	
	Если НайтиСтрокуВМассиве(РезультатКоманды, "Switched") Тогда
		Результат.Успешно = Истина;
		Результат.Сообщение = СтрШаблон("Успешно перешли на ветку %1",ИмяВетки);
	ИначеЕсли НайтиСтрокуВМассиве(РезультатКоманды, "already exists") Тогда
		Результат.Сообщение = СтрШаблон("Не удалось создать ветку %1, она уже существует",ИмяВетки);
	ИначеЕсли НайтиСтрокуВМассиве(РезультатКоманды, "did not match any file") Тогда
		Результат.Сообщение = СтрШаблон("Не удалось перейти на ветку %1, она не существует",ИмяВетки);
	ИначеЕсли НайтиСтрокуВМассиве(РезультатКоманды, "Already on") Тогда
		Результат.Успешно = Истина;
		Результат.Сообщение = СтрШаблон("Уже на ветке %1",ИмяВетки);
	Иначе
		Результат.Сообщение = СтрШаблон("Не удалось перейти на ветку %1, неизвестная ошибка.",ИмяВетки);
	КонецЕсли;	 
	
	Возврат Результат;
КонецФункции

Асинх Функция ЕстьЛокальныеИзмененияАсинх(ПутьКПапке) Экспорт
	РезультатКоманды = Ждать ВыполнитьКомандуГитАсинх(ПутьКПапке, "status");
	Результат = ПодготовитьСтруктуруРезультата(РезультатКоманды); 
	
	Если НайтиСтрокуВМассиве(РезультатКоманды, "nothing to commit, working tree clean") Тогда
		Результат.Успешно = Истина;
		Результат.Сообщение = "Нет изменений";
		Результат.Данные = Ложь;
	ИначеЕсли РезультатКоманды.Количество() > 0 Тогда
		Результат.Успешно = Истина;
		Результат.Сообщение = "Есть Изменения";
		Результат.Данные = Истина;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Асинх Функция КлонироватьРепозиторийАсинх(ПутьКПапке, АдресРепозитория) Экспорт
	ЭтоРепозиторий = Ждать ЭтоГитРепозиторийАсинх(ПутьКПапке);
	НайденныеФайлы = Ждать НайтиФайлыАсинх(ПутьКПапке,"*");
	Результат = ПодготовитьСтруктуруРезультата();
	
	Если ЭтоРепозиторий.Успешно Тогда
		Результат.Сообщение = "В данной папке уже есть репозиторий. Выберите пустую папку.";
	ИначеЕсли НайденныеФайлы.Количество() > 0 Тогда
		Результат.Сообщение = "В данной папке есть файлы. Выберите пустую папку.";
	Иначе
		РезультатКоманды = Ждать ВыполнитьКомандуГитАсинх(ПутьКПапке, "clone --progress " + АдресРепозитория + " .", Истина);
		Результат.Данные = РезультатКоманды;
		ЭтоРепозиторий = Ждать ЭтоГитРепозиторийАсинх(ПутьКПапке);
		Результат.Успешно = ЭтоРепозиторий.Успешно;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Асинх Функция ПолучитьИзмененияУдаленногоРепозиторияАсинх(ПутьКПапке) Экспорт
	РезультатКоманды = Ждать ВыполнитьКомандуГитАсинх(ПутьКПапке, "fetch");
	Результат = ПодготовитьСтруктуруРезультата(РезультатКоманды); 
	
	Если НайтиСтрокуВМассиве(РезультатКоманды, "fatal") Тогда
		Результат.Сообщение = "Не удалось получить изменения.";
	Иначе
		Результат.Успешно = Истина;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Асинх Функция ОбновитьВеткуИзУдаленногоРепозиторияАсинх(ПутьКПапке, Ветка) Экспорт

	Возврат Ждать ОбъединитьВеткиПоНаименованиямАсинх(ПутьКПапке, Строка(Ветка), "origin/" + Строка(Ветка));
	
КонецФункции

Асинх Функция ОбъединитьВеткиАсинх(ПутьКПапке, ВеткаПолучатель, ВеткаИсточник) Экспорт
	
	Возврат Ждать ОбъединитьВеткиПоНаименованиямАсинх(ПутьКПапке, Строка(ВеткаПолучатель), Строка(ВеткаИсточник));
	
КонецФункции

Асинх Функция ОбъединитьВеткиПоНаименованиямАсинх(ПутьКПапке, ПолучательНаименование, ИсточникНаименование) Экспорт
	
	РезультатКоманды = Ждать ВыполнитьКомандуГитАсинх(ПутьКПапке, СтрШаблон("merge %1 %2",ПолучательНаименование,ИсточникНаименование));
	Результат = ПодготовитьСтруктуруРезультата(РезультатКоманды);
	
	Если НайтиСтрокуВМассиве(РезультатКоманды, "Please commit your changes or stash them before you merge") Тогда
		Результат.Сообщение = "Невозможно выполнить слияние веток, есть незафиксированные изменения. Выполните коммит, потом повторите слияние.";
	ИначеЕсли НайтиСтрокуВМассиве(РезультатКоманды, "Automatic merge failed; fix conflicts and then commit the result.") Тогда
		Результат.Сообщение = "Возник конфликт слияния веток в одном или нескольких файлах. 
			| Устраните конфликт, после этого повторите операцию. 
			| Список конфликтных файлов можно получить командой git status в папке локального репозитория.";
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Асинх Функция ЗафиксироватьИзмененияАсинх(ПутьКПапке, ТекстСообщения) Экспорт
	Результат = ПодготовитьСтруктуруРезультата();
	
	времТекст = СокрЛП(СтрЗаменить(ТекстСообщения,"""",""));
	Если ПустаяСтрока(времТекст) Тогда
		Результат.Сообщение = "Нельзя сделать коммит с пустым сообщением.";
	Иначе
		РезультатКоманды = Ждать ВыполнитьКомандуГитАсинх(ПутьКПапке, "add .");
		РезультатКоманды = Ждать ВыполнитьКомандуГитАсинх(ПутьКПапке, СтрШаблон("commit -m""%1""",времТекст));
		Результат = ПодготовитьСтруктуруРезультата(РезультатКоманды);
		Результат.Успешно = Не НайтиСтрокуВМассиве(РезультатКоманды, "fatal") И Не НайтиСтрокуВМассиве(РезультатКоманды, "error"); 
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции

Асинх Функция ОтправитьИзмененияВУдаленныйРепозиторийАсинх(ПутьКПапке, Ветка) Экспорт
	РезультатКоманды = Ждать ВыполнитьКомандуГитАсинх(ПутьКПапке, "push" + ?(ПустаяСтрока(Строка(Ветка)), "", " origin " + Строка(Ветка)));
	Результат = ПодготовитьСтруктуруРезультата(РезультатКоманды);
	Результат.Успешно = Не НайтиСтрокуВМассиве(РезультатКоманды, "fatal") И Не НайтиСтрокуВМассиве(РезультатКоманды, "error");
	Если НайтиСтрокуВМассиве(РезультатКоманды, "failed to push some refs") Тогда
		Результат.Сообщение = "Не удалось отправить изменения, версия удаленного репозитория оотличается от ожидаемой.
		| Обновите ветку из удаленного репозитория, потом попробуйте отправить изменения снова.";
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#Область СлужебныеФункции

Процедура ПроверитьВебКлиент()
	#Если ВебКлиент Тогда
	ВызватьИсключение "Не работает на веб-клиенте.";
	#КонецЕсли	
КонецПроцедуры

Функция ОбернутьКавычками(ИсходнаяСтрока)
	Возврат """" + ИсходнаяСтрока + """";
КонецФункции

Асинх Функция ПапкаСуществуетАсинх(ПутьКПапке, ВыводитьСообщение = Истина)
	мПапка = Новый Файл(ПутьКПапке);
	ПапкаСуществует = Ждать мПапка.СуществуетАсинх(); 
	
	Если Не ПапкаСуществует И ВыводитьСообщение Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Каталог " + ПутьКПапке + " не существует.";
		Сообщение.Сообщить();
	КонецЕсли;
	
	Возврат ПапкаСуществует;
КонецФункции

Асинх Функция УдалитьВременныйФайл(ПутьКФайлу)
	времФайл = Новый Файл(ПутьКФайлу);
	ФайлСуществует = Ждать времФайл.СуществуетАсинх();
	Если ФайлСуществует Тогда
		Ждать УдалитьФайлыАсинх(ПутьКФайлу);
	КонецЕсли;	
КонецФункции

Асинх Функция ВыполнитьКомандуГитАсинх(ПутьКПапке, Команда, НеПроверятьНаличиеРепозитория = Ложь)
	ПроверитьВебКлиент();
	Результат = Новый Массив();
	
	МожноПродолжать = Ложь;
	МожноПродолжать = МожноПродолжать Или НеПроверятьНаличиеРепозитория;
	Если Не МожноПродолжать Тогда
		ЭтоРепозиторий = Ждать ЭтоГитРепозиторийАсинх(ПутьКПапке);
		МожноПродолжать = МожноПродолжать Или ЭтоРепозиторий.Успешно;
	КонецЕсли;
	
	Если МожноПродолжать Тогда
		ВременныйФайл = ПолучитьИмяВременногоФайла("txt");
		Команда = "cmd /c git " + Команда + " > " + ОбернутьКавычками(ВременныйФайл) + " 2>&1";
		КодВозврата = ВыполнениеСкриптовWScriptShellКлиент.ВыполнитьСкрипт(Команда,ПутьКПапке,0,Истина);

		//Если КодВозврата = 0 Тогда
		ТекстСтатуса = Новый ЧтениеТекста(ВременныйФайл,КодировкаТекста.UTF8);
		ТекСтрока = "";
		Пока ТекСтрока <> Неопределено Цикл
			ТекСтрока = ТекстСтатуса.ПрочитатьСтроку();
			Если ТекСтрока <> Неопределено Тогда
				Результат.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		ТекстСтатуса.Закрыть();
		//КонецЕсли;
		
		Ждать УдалитьВременныйФайл(ВременныйФайл);
		
	КонецЕсли; 
	
	Возврат Результат;
КонецФункции

Функция ПодготовитьСтруктуруРезультата(Данные = "")
	Результат = Новый Структура;
	Результат.Вставить("Успешно",Ложь);
	Результат.Вставить("Сообщение","");
	Результат.Вставить("Данные",Данные);
	Возврат Результат;
КонецФункции

Функция НайтиСтрокуВМассиве(МассивСтрок,СтрокаПоиска)
	Для Каждого ЭлементМассива Из МассивСтрок Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда
			Если СтрНайти(Врег(ЭлементМассива), Врег(СтрокаПоиска)) <> 0 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;  
	
	Возврат Ложь;
КонецФункции

// Возвращает строку, состоящую только из цифр и символов русского и английского алфавита
Функция УбратьЛишниеСимволыИзСтроки(Строка) Экспорт
	РезультирующаяСтрока = "";
	Для н = 1 По СтрДлина(Строка) Цикл
		Если (КодСимвола(Строка, н) >= 48 И КодСимвола(Строка, н) <= 57)
			ИЛИ (КодСимвола(Строка, н) >= 65 И КодСимвола(Строка, н) <= 90)
			ИЛИ (КодСимвола(Строка, н) >= 97 И КодСимвола(Строка, н) <= 122)
			ИЛИ (КодСимвола(Строка, н) >= 1040 И КодСимвола(Строка, н) <= 1103) Тогда
			РезультирующаяСтрока = РезультирующаяСтрока + Сред(Строка, н, 1);
		КонецЕсли;
	КонецЦикла;
	Возврат РезультирующаяСтрока;
КонецФункции

Асинх Функция ОбработатьОшибкуРаботыСГит(РезультатКоманды, Отказ) Экспорт
	// TODO: делать запись в журнал регистрации
	Отказ = Истина;
	ВызватьИсключение РезультатКоманды.Сообщение;	
КонецФункции

#КонецОбласти